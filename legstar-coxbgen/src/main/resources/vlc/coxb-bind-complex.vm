#**
Complex binding class Velocity Template.
@author Fady
@version 1.1.1
*#
## ==================================================================
## Complex element binding code
##
#parse("vlc/coxb-bind-common-imports.vm")

package $binding-type-package;

import com.legstar.coxb.ICobolBinding;
import com.legstar.coxb.common.CComplexBinding;
#foreach($importType in $importTypes)
import ${importType};
#end
#if (!$importTypes.contains("com.legstar.coxb.ICobolComplexBinding"))
import com.legstar.coxb.ICobolComplexBinding;
#end
import com.legstar.coxb.host.HostException;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import ${jaxb-package}.ObjectFactory;
import ${jaxb-package}.$helper.getJaxbTypeName($binding);

/**
 * LegStar Binding for Complex element :
 *   $binding.jaxbType.
 * 
 * This class was generated by ${generatorName}.
 * Generated on $formattedDate
 */
public class $binding-class-name 
             extends CComplexBinding {

    /** Jaxb object to which this cobol complex element is bound. */
    private $helper.getJaxbTypeName($binding) mJaxbObject;
  
    /** Indicates that the associated Jaxb object just came from the constructor
     * and doesn't need to be recreated. */
    private boolean mUnusedJaxbObject = false;
    
#foreach ($child in $binding.childrenList)
#if($child.isBound())
    /** Child bound to jaxb property ${child.jaxbName}(${helper.getJaxbTypeName($child)}). */
#else
    /** Unbound child. */
#end
    public $helper.getBindingInterfaceName($child) $helper.getFieldName($child);
#if ($helper.getGenericType($child).equals("complexArray"))
    /** Binding item for complex array binding $helper.getCoxbTypeName($child). */
    public ICobolComplexBinding $helper.getFieldName($child)Item;
#end
#end
            
    /** Logger. */
    private static final Log LOG
        = LogFactory.getLog(${binding-class-name}.class);
#if(${hasSimpleChilds} == true)

    /** Binding factory. */
    private static final ICobolBindingFactory BF
        = CobolBindingFactory.getBindingFactory();
#end    
 
    /** Static reference to Jaxb object factory to be used as default. */
    private static final ObjectFactory JF = new ObjectFactory();
    
    /** Current Jaxb object factory (Defaults to the static one but can be
     *  changed). */
    private ObjectFactory mJaxbObjectFactory = JF;
    
    /**
     * Constructor for a root Complex element without a bound JAXB object.
     */
    public ${binding-class-name}() {
        this(null);
    }

    /**
     * Constructor for a root Complex element with a bound JAXB object.
     * 
     * @param jaxbObject the concrete JAXB object instance bound to this
     *        complex element
     */
    public ${binding-class-name}(
            final $helper.getJaxbTypeName($binding) jaxbObject) {
#if($helper.isEmpty(${complexBinding.bindingName}) == true)
#set($bindingName = "")
#else
#set($bindingName = ${complexBinding.bindingName})
#end
#if($helper.isEmpty(${complexBinding.jaxbName}) == true)
#set($jaxbName = "")
#else
#set($jaxbName = ${complexBinding.jaxbName})
#end
        this("${bindingName}", "${jaxbName}", null, jaxbObject);
    }

    /**
    * Constructor for a Complex element as a child of another element and
    * an associated JAXB object.
    * 
    * @param bindingName the identifier for this binding
    * @param jaxbName bindingName of field in parent JAXB object
    * @param jaxbObject the concrete JAXB object instance bound to this
    *        complex element
    * @param parentBinding a reference to the parent binding
    */
    public ${binding-class-name}(
            final String bindingName,
            final String jaxbName,
            final ICobolComplexBinding parentBinding,
            final $helper.getJaxbTypeName($binding) jaxbObject) {
        
        super(bindingName, jaxbName, ${helper.getJaxbTypeName($binding)}.class, null, parentBinding);
        mJaxbObject = jaxbObject;
        if (mJaxbObject != null) {
            mUnusedJaxbObject = true;
        }
        initChildren();
    }

    /** Creates a binding property for each child. */
    private void initChildren() {
        if (LOG.isDebugEnabled()) {
            LOG.debug("Initializing started");
        }
        /* Create binding children instances */
#set($parent-binding = "this")
#set($childrenList = $binding.childrenList)
#parse("vlc/coxb-bind-init-children.vm")

        /* Add children to children list */
#foreach ($child in $binding.childrenList)
        getChildrenList().add(${helper.getFieldName($child)});
#end ##foreach

        if (LOG.isDebugEnabled()) {
            LOG.debug("Initializing successful");
        }
    }
    
    /** {@inheritDoc} */
    public final void createJaxbObject() throws HostException {
        /* Since this complex binding has a constructor that takes a
         * JAXB object, we might already have a Jaxb object that
         * was not used yet. */
        if (mUnusedJaxbObject && mJaxbObject != null) {
            mUnusedJaxbObject = false;
            return;
        }
        mJaxbObject = mJaxbObjectFactory.create${helper.getJaxbTypeName($binding)}();
    }

    /** {@inheritDoc} */
    public final void setChildrenValues() throws HostException {

         /* Make sure there is an associated JAXB object*/
        if (mJaxbObject == null) {
            createJaxbObject();
        }
#foreach ($child in $binding.childrenList)
#if($child.isBound())
        /* Get JAXB property ${helper.getFieldName($child)} */
        if (LOG.isDebugEnabled()) {
            LOG.debug("Getting value from JAXB property "
                    + "${helper.getFieldName($child)}"
                    + " value=" + mJaxbObject.${helper.getterMethodName($child)}());
        }
        ${helper.getFieldName($child)}.setObjectValue(mJaxbObject.${helper.getterMethodName($child)}());
#if(${helper.isVariableSizeArray($child)})
        /* For variable size array or list, we make sure any
         * associated counter is updated */
        setCounterValue(${helper.getFieldName($child)}.getDependingOn(),
                ((List < ? >) mJaxbObject.${helper.getterMethodName($child)}()).size());
#end
#end
#end ##foreach
    }

    /** {@inheritDoc} */
    @SuppressWarnings("unchecked")
    public final void setJaxbPropertyValue(final int index) throws HostException {
 
        ICobolBinding child = getChildrenList().get(index);
        
    	/* Children that are not bound to a jaxb property are ignored.
    	 * This includes Choices and dynamically generated counters
    	 * for instance.  */
        if (!child.isBound()) {
            return;
        }
        
        Object bindingValue = child.getObjectValue(child.getJaxbType());
        if (LOG.isDebugEnabled()) {
            LOG.debug("Setting value of JAXB property "
                    + child.getJaxbName()
                    + " value=" + bindingValue);
        }
        /* Set the JAXB object property value from binding object */
        switch (index) {
#set($counter = 0)
#foreach ($child in $binding.childrenList)
        case ${counter}:
#if($child.isBound())
#if(${helper.isArray($child)})
            mJaxbObject.${helper.getterMethodName($child)}().clear();
            mJaxbObject.${helper.getterMethodName($child)}().addAll(
                (List < $helper.getJaxbTypeName($child) >) bindingValue);
#else
            mJaxbObject.${helper.setterMethodName($child)}(($helper.getJaxbTypeName($child)) bindingValue);
#end
#end
            break;
#set($counter = $counter + 1)
#end ##foreach
        default:
            break;
        }
    }

    /** {@inheritDoc} */
    public final Object getObjectValue(
            final Class < ? > type) throws HostException {
        if (type.equals(${helper.getJaxbTypeName($binding)}.class)) {
            return mJaxbObject;
        } else {
            throw new HostException("Attempt to get binding " + getBindingName()
                    + " as an incompatible type " + type);
        }
    }

    /** {@inheritDoc} */
    public final void setObjectValue(
            final Object bindingValue) throws HostException {
        if (bindingValue == null) {
            mJaxbObject = null;
            return;
        }
        if (bindingValue.getClass().equals(${helper.getJaxbTypeName($binding)}.class)) {
            mJaxbObject = ($helper.getJaxbTypeName($binding)) bindingValue;
        } else {
            throw new HostException("Attempt to set binding " + getBindingName()
                    + " from an incompatible value " + bindingValue);
        }
    }

    /**
     * @return the java object factory for objects creation
     */
    public final ObjectFactory getObjectFactory() {
        return mJaxbObjectFactory;
    }

    /**
     * @param jaxbObjectFactory the java object factory for objects creation 
     */
    public final void setObjectFactory(final Object jaxbObjectFactory) {
        mJaxbObjectFactory = (ObjectFactory) jaxbObjectFactory;
    }

    /** {@inheritDoc} */
    public final boolean isSet() {
        return (mJaxbObject != null);
    }

    /**
     * @return the bound JAXB object
     */
    public final $helper.getJaxbTypeName($binding) get${helper.getJaxbTypeName($binding)}() {
        return mJaxbObject;
    }
    
}

