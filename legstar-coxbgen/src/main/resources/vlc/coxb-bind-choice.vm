#**
Choice binding class Velocity Template.
@author Fady
@version 1.1.1
*#
## ==================================================================
## Choice element binding code
##
#parse("vlc/coxb-bind-common-imports.vm")
package $binding-type-package;

import com.legstar.coxb.ICobolBinding;
import com.legstar.coxb.common.CChoiceBinding;
#foreach($importType in $importTypes)
import ${importType};
#end
#if (!$importTypes.contains("com.legstar.coxb.ICobolComplexBinding"))
import com.legstar.coxb.ICobolComplexBinding;
#end
import com.legstar.coxb.host.HostException;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import ${jaxb-package}.$helper.getParentJaxbTypeName($binding);

/**
 * LegStar Binding for Choice element:
 *   $helper.getParentJaxbTypeName($binding).
 * 
 * Represents a choice between 2 or more elements. A choice maps to a cobol
 * REDEFINES clause exposed as an xs:choice in the corresponding XML schema
 * 
 * This class was generated by ${generatorName}.
 * Generated on $formattedDate
 */
public class $binding-class-name 
             extends CChoiceBinding {

#foreach ($child in $binding.alternativesList)
#if($child.isBound())
    /** Alternative bound bound to jaxb property ${child.jaxbName}(${helper.getJaxbTypeName($child)}). */
#else
    /** Unbound Alternative. */
#end
    public $helper.getBindingInterfaceName($child) $helper.getFieldName($child);
#end

    /** Logger. */
    private static final Log LOG =
        LogFactory.getLog(${binding-class-name}.class);

#if(${hasSimpleChilds} == true)
    /** Binding factory. */
    private static final ICobolBindingFactory BF
        = CobolBindingFactory.getBindingFactory();
#end    
    
    /**
     * Constructor for a Choice element.
     * 
     * @param bindingName the identifier for this binding
     * @param parentBinding a reference to the parent binding
     */
    public ${binding-class-name}(
            final String bindingName,
            final ICobolComplexBinding parentBinding) {
        
        super(bindingName, null, parentBinding);
#if(${helper.isEmpty("${binding.getMarshalChoiceStrategyClassName()}")} == false)
        setMarshalChoiceStrategyClassName(
            "${binding.getMarshalChoiceStrategyClassName()}");
#end
#if(${helper.isEmpty("${binding.getUnmarshalChoiceStrategyClassName()}")} == false)
        setUnmarshalChoiceStrategyClassName(
            "${binding.getUnmarshalChoiceStrategyClassName()}");
#end
        initAlternatives();
    }

    /** Creates a binding property for each alternative. */
    private void initAlternatives() {
        if (LOG.isDebugEnabled()) {
            LOG.debug("Initializing started");
        }
        /* Create binding alternatives instances */
#set($parent-binding = "getParentBinding()")
#set($childrenList = $binding.alternativesList)
#parse("vlc/coxb-bind-init-children.vm")

        /* Add alternatives to alternatives list */
#foreach ($child in $binding.alternativesList)
        addAlternative(${helper.getFieldName($child)});
#end ##foreach

        if (LOG.isDebugEnabled()) {
            LOG.debug("Initializing successful");
        }
    }
 
    /** {@inheritDoc} */
    public final void setAlternativesValues() throws HostException {
        Object value;
#foreach ($child in $binding.alternativesList)
#if($child.isBound())
        value = get${helper.getParentJaxbTypeName($binding)}().get${child.jaxbName}();
        if (value != null) {
            if (LOG.isDebugEnabled()) {
                LOG.debug("Getting value from JAXB property "
                        + "${child.jaxbName}"
                        + " value=" + value);
            }
            ${helper.getFieldName($child)}.setObjectValue(value);
        }
#end
#end

    }
    /** {@inheritDoc} */
    public final void setJaxbPropertyValue(
            final int index) throws HostException {
        /* Set the JAXB object property value from binding object */
        ICobolBinding alt = getAlternativesList().get(index);

    	/* Alternatives that are not bound to a jaxb property are ignored.
    	 * This includes Choices and dynamically generated counters
    	 * for instance.  */
        if (!alt.isBound()) {
            return;
        }

        Object bindingValue = alt.getObjectValue(alt.getJaxbType());
        if (LOG.isDebugEnabled()) {
            LOG.debug("Setting value of JAXB property "
                    + alt.getJaxbName()
                    + " value=" + bindingValue);
        }
        switch (index) {
#set($counter = 0)
#foreach ($child in $binding.alternativesList)
        case ${counter}:
#if($child.isBound())
#if(${helper.isArray($child)})
            get${helper.getParentJaxbTypeName($binding)}().${helper.getterMethodName($child)}().clear();
            get${helper.getParentJaxbTypeName($binding)}().${helper.getterMethodName($child)}().addAll(
                (List < $helper.getJaxbTypeName($child) >) bindingValue);
#else
            get${helper.getParentJaxbTypeName($binding)}().${helper.setterMethodName($child)}(
                ($helper.getJaxbTypeName($child)) bindingValue);
#end
#end
            break;
#set($counter = $counter + 1)
#end
        default:
            break;
        }
    }
    
    /** {@inheritDoc} */
    public final Object getObjectValue(
            final Class < ? >  type) throws HostException {
        throw new HostException("Attempt to get value from choice binding "
                + getCobolName());
    }

    /** {@inheritDoc} */
    public final void setObjectValue(final Object value) throws HostException {
        throw new HostException("Attempt to set value for choice binding "
                + getCobolName());
    }
    
    /** {@inheritDoc} */
    public final boolean isSet() {
        /* A Choice is considered set if at least one of its alternatives
         * is set. */
        for (ICobolBinding alt : getAlternativesList()) {
            if (alt.isSet()) {
                return true;
            }
        }
        return false;
    }

    /**
     * @return the JAXB object bound to the parent of this choice
     * @throws HostException if parent bound JAXB object cannot be retrieved
     */
    public final ${helper.getParentJaxbTypeName($binding)} get${helper.getParentJaxbTypeName($binding)}() throws HostException {
        return (${helper.getParentJaxbTypeName($binding)}) getParentJaxbObject();
    }
    
}

