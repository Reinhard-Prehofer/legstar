
package com.legstar.test.coxb.dplarcht.bind;

import com.legstar.coxb.host.HostException;
import com.legstar.coxb.ICobolComplexBinding;

import com.legstar.coxb.ICobolBinding;

import com.legstar.coxb.ICobolChoiceBinding;
import com.legstar.coxb.common.CChoiceBinding;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import com.legstar.test.coxb.dplarcht.LsItemsArrayType;

import com.legstar.test.coxb.dplarcht.LsFilesDataType;
import com.legstar.test.coxb.dplarcht.LsProgramsDataType;
import com.legstar.test.coxb.dplarcht.LsTransactionsDataType;

/**
 * This class was generated by LegStar coxbgen version 1.1.
 * 2007-07-05T15:23:31.281+02:00
 * Represents a choice between 2 or more elements. A choice maps to a cobol
 * REDEFINES clause exposed as an xs:choice in the corresponding XML schema
 */

public class LsFilesDataChoiceBinding 
             extends CChoiceBinding {

    /** Alternatives of this choice binding. */
    
    /** Alternative bound to jaxb property LsFilesData(LsFilesDataType). */
    public LsFilesDataTypeBinding lsFilesData;
    /** Alternative bound to jaxb property LsProgramsData(LsProgramsDataType). */
    public LsProgramsDataTypeBinding lsProgramsData;
    /** Alternative bound to jaxb property LsTransactionsData(LsTransactionsDataType). */
    public LsTransactionsDataTypeBinding lsTransactionsData;

    /** Logger. */
    private static final Log LOG =
        LogFactory.getLog(LsFilesDataChoiceBinding.class);

    
    
    /**
     * Constructor for a Choice element.
     * 
     * @param name the identifier for this binding
     * @param parentBinding a reference to the parent binding
     */
    public LsFilesDataChoiceBinding(
            final String name,
            final ICobolComplexBinding parentBinding) {
        
		super(name, null, parentBinding);
        setMarshalChoiceStrategyClassName("");
        setUnmarshalChoiceStrategyClassName("com.legstar.coxb.cust.dplarcht.ChoiceSelector");
        initAlternatives();
    }

    /** Creates a binding property for each alternative. */
    private void initAlternatives() {
        if (LOG.isDebugEnabled()) {
            LOG.debug("Initializing started");
        }
        /* Create binding alternatives instances */
        lsFilesData = new LsFilesDataTypeBinding("LsFilesData",
             "LsFilesData", getParentBinding(), null);
        lsProgramsData = new LsProgramsDataTypeBinding("LsProgramsData",
             "LsProgramsData", getParentBinding(), null);
        lsProgramsData.setRedefines("LS-FILES-DATA");
        lsTransactionsData = new LsTransactionsDataTypeBinding("LsTransactionsData",
             "LsTransactionsData", getParentBinding(), null);
        lsTransactionsData.setRedefines("LS-FILES-DATA");
        
        /* Add alternatives to alternatives list */
        addAlternative(lsFilesData);
        addAlternative(lsProgramsData);
        addAlternative(lsTransactionsData);

        if (LOG.isDebugEnabled()) {
            LOG.debug("Initializing successful");
        }
    }
 
    /** {@inheritDoc} */
    public final void setAlternativesValues() throws HostException {
        Object value;
    
        value = getLsItemsArrayType().getLsFilesData();
        if (value != null) {
            if (LOG.isDebugEnabled()) {
                LOG.debug("Getting value from JAXB property "
                        + "LsFilesData"
                        + " value=" + value);
            }
            lsFilesData.setObjectValue(value);
        }
    
        value = getLsItemsArrayType().getLsProgramsData();
        if (value != null) {
            if (LOG.isDebugEnabled()) {
                LOG.debug("Getting value from JAXB property "
                        + "LsProgramsData"
                        + " value=" + value);
            }
            lsProgramsData.setObjectValue(value);
        }
    
        value = getLsItemsArrayType().getLsTransactionsData();
        if (value != null) {
            if (LOG.isDebugEnabled()) {
                LOG.debug("Getting value from JAXB property "
                        + "LsTransactionsData"
                        + " value=" + value);
            }
            lsTransactionsData.setObjectValue(value);
        }
    
    }
    /** {@inheritDoc} */
    public final void setJaxbPropertyValue(
            final int index) throws HostException {
        /* Set the JAXB object property value from binding object */
        ICobolBinding alt = getAlternativesList().get(index);

        /* Choice children are a special case. They directly set 
         * their parent object depending on the chosen choice
         * strategy. */
        if (alt instanceof ICobolChoiceBinding) {
            return;
        }

        Object value = alt.getObjectValue(alt.getJaxbType());
        if (LOG.isDebugEnabled()) {
            LOG.debug("Setting value of JAXB property "
                    + alt.getJaxbName()
                    + " value=" + value);
        }
        switch (index) {
        case 0:
            getLsItemsArrayType().setLsFilesData(
                (LsFilesDataType) lsFilesData.getObjectValue(LsFilesDataType.class));
            break;
        case 1:
            getLsItemsArrayType().setLsProgramsData(
                (LsProgramsDataType) lsProgramsData.getObjectValue(LsProgramsDataType.class));
            break;
        case 2:
            getLsItemsArrayType().setLsTransactionsData(
                (LsTransactionsDataType) lsTransactionsData.getObjectValue(LsTransactionsDataType.class));
            break;
        default:
            break;
        }
    }
    
    /** {@inheritDoc} */
    public final Object getObjectValue(final Class type) throws HostException {
        throw new HostException("Attempt to get value from choice binding "
                + getCobolName());
    }

    /** {@inheritDoc} */
    public final void setObjectValue(final Object value) throws HostException {
        throw new HostException("Attempt to set value for choice binding "
                + getCobolName());
    }
    
    /** {@inheritDoc} */
    public final boolean isSet() {
        /* A Choice is considered set if at least one of its alternatives
         * is set. */
        for (ICobolBinding alt : getAlternativesList()) {
            if (alt.isSet()) {
                return true;
            }
        }
        return false;
    }

    /**
     * @return the JAXB object bound to the parent of this choice
     * @throws HostException if parent bound JAXB object cannot be retrieved
     */
    public final LsItemsArrayType getLsItemsArrayType() throws HostException {
        return (LsItemsArrayType) getParentJaxbObject();
    }

}
