 -----
 Release Notes
 -----

PREREQUISITES:

 Java 1.5+ and ANT 1.6.5+ are both prerequisites for LegStar.
 Make sure JAVA_HOME and ANT_HOME environment variables are set and that
 $JAVA_HOME/bin (%JAVA_HOME%/bin on Windows) and $ANT_HOME/bin (%ANT_HOME%/bin
 on Windows) are both in your system path.

 Coxbgen relies on {{{https://jaxb.dev.java.net/}Sun's JAXB}}. The JAXB
 implementation must be at least 2.1 compliant. Such an implementation is part
 of the LegStar distribution.

INSTALLING/UNINSTALLING:

 These instructions apply if you are installing from the coxbgen standalone
 distribution. If you are installing the complete LegStar distribution please
 refer to {{{../legstar-distribution/release-notes.html}legstar distribution}}.

 [[1]] Unzip the binary distribution package into the directory of your choice,
       referred to as <installDir> in the following steps.

   The directory tree should look like this:
   
+---------------------------------------+
    <installDir>
      |-->LICENSE
      |-->NOTICE
      |-->README
      |--><samples>
          |--><quickstarts>
              |--><adapter_lsfileae>
                  |-->build-jaxb.xml
                  |-->build-coxb.xml
                  |--><schema>
                      |-->lsfileae.xsd
              |--><proxy_pojo_jvmquery>
                  |-->build-jaxb.xml
                  |-->build-coxb-jvmqueryrequest.xml
                  |-->build-coxb-jvmqueryreply.xml
                  |--><src>
                      |-->**/*.java
                  |--><schema>
                      |-->jvmquery.xsd
              |--><proxy_ws_cultureinfo>
                  |-->build-jaxb.xml
                  |-->build-coxb-getinfo.xml
                  |-->build-coxb-getinforesponse.xml
                  |--><schema>
                      |-->jvmquery.xsd
      |--><lib>
          |-->*.jar

+---------------------------------------+
   
 [[2]] To uninstall, remove the installDir folder.

RUNNING THE SAMPLES:

 [[1]] In order to generate binding classes for the lsfileae adapter, run
       command "ant -f build-jaxb.xml" from the
       samples/quickstarts/adapter_lsfileae folder and check the result.
       This should create a src folder containing generated JAXB classes
       from the sample XML Schema in the schema folder.
       
       The JAXB classes are identical to the classes generated using Sun's
       XJC utility apart from additional Java 5 annotations holding COBOL
       meta-data.
       
       From the samples/quickstarts/adapter_lsfileae folder again, run command
       "ant -f build-coxb.xml". This should create binding classes by
       reflecting on the JAXB classes generated at the previous step.
       
       The binding classes provide a high performance alternative to
       reflecting on the JAXB classes at runtime. They are used by
       higher level LegStar modules.
    
 [[2]] In order to generate binding classes for the jvmquery proxy, run
       command "ant -f build-jaxb.xml" from the
       samples/quickstarts/proxy_pojo_jvmquery folder and check the result.
       
       From the samples/quickstarts/proxy_pojo_jvmquery folder again, run
       command "ant -f build-coxb-jvmqueryrequest.xml". This creates
       binding classes for the JvmQueryRequest JAXB root class.
    
       From the samples/quickstarts/proxy_pojo_jvmquery folder again, run
       command "ant -f build-coxb-jvmqueryreply.xml". This creates
       binding classes for the JvmQueryReply JAXB root class.
    
 [[3]] In order to generate binding classes for the cultureinfo proxy, run
       command "ant -f build-jaxb.xml" from the
       samples/quickstarts/proxy_pojo_cultureinfo folder and check the result.
       
       From the samples/quickstarts/proxy_pojo_cultureinfo folder again, run
       command "ant -f build-coxb-getinfo.xml". This creates
       binding classes for the GetInfo JAXB root class.
    
       From the samples/quickstarts/proxy_pojo_cultureinfo folder again, run
       command "ant -f build-coxb-getinforesponse.xml". This creates
       binding classes for the GetInfoResponse JAXB root class.
    
 [[4]] Follow instructions in build-jaxb.xml and build-coxb*.xml to generate
       binding classes from your own annotated XML schemas.
   
USING TRANFORMERS

  Once you generate binding classes using the COBOL Binding Generator, you get
  a set of transformer classes that you can easily use to turn mainframe
  payloads to java data objects.
  
  This is useful if you are not planning on using LegStar transports (LegStar
  transports also use transformers but this is automatically done for you under
  the hood).
  
  This is sample code showing how you would use a generated mainframe to java
  transformer assuming you just generated a transformer class called
  com.legstar.test.coxb.lsfileae.DfhcommareaTransformers.
  
+---------------------------------------
    /**
     * Transform host data and test java data object result.
     * @param hostBytes a byte array holding the mainframe payload
     * @throws HostTransformException if transforming fails
     */
    public void hostToJavaTransform(final byte[] hostBytes) throws HostTransformException {

        DfhcommareaTransformers transformers = new DfhcommareaTransformers();
        Dfhcommarea dfhcommarea = transformers.toJava(hostBytes);
        System.out.println(dfhcommarea.getComNumber());
        System.out.println(dfhcommarea.getComPersonal().getComName());
        System.out.println(dfhcommarea.getComPersonal().getComAddress());
        System.out.println(dfhcommarea.getComPersonal().getComPhone());
        System.out.println(dfhcommarea.getComDate());
        System.out.println(dfhcommarea.getComAmount());
        System.out.println(dfhcommarea.getComComment());
    }
+---------------------------------------

  Conversely, you would produce a byte array with mainframe data from a java data object
  with code similar to this:
  
+---------------------------------------
    /**
     * Creates a java data object and returns the host data result.
     * @return a byte array holding the mainframe payload
     * @throws HostTransformException if transforming fails
     */
    public byte[] javaToHostTransform() throws HostTransformException {
        ObjectFactory of = new ObjectFactory();
        Dfhcommarea dfhcommarea = of.createDfhcommarea();
        dfhcommarea.setComNumber(100L);
        ComPersonal comPersonal = of.createComPersonal();
        comPersonal.setComName("TOTO");
        comPersonal.setComAddress("LABAS STREET");
        comPersonal.setComPhone("88993314");
        dfhcommarea.setComPersonal(comPersonal);
        dfhcommarea.setComDate("100458");
        dfhcommarea.setComAmount("00100.35");
        dfhcommarea.setComComment("A VOIR");
        DfhcommareaTransformers transformers = new DfhcommareaTransformers();
        return transformers.toHost(dfhcommarea);
    }
+---------------------------------------
  
  Generated transformers use the default IBM01140 US EBCDIC character set for
  conversions.
  
  Methods toHost and toJava also accept a character set name as a second
  parameter if you need to use a different one (just make sure your JRE
  charsets.jar supports your character set).
  
  In addition to Host/Java transformers, you can generate Host/XML transformers
  by turning the xmlTransformers generation option on.
  
  Using these transformers, this is sample code to turn host data to XML:
  
+---------------------------------------
    /**
     * Transform host data and test XML result.
     * @param hostBytes a byte array holding the mainframe payload
     * @throws HostTransformException if transforming fails
     */
    public void hostToXmlTransform(final byte[] hostBytes) throws HostTransformException {

        DfhcommareaXmlTransformers transformers = new DfhcommareaXmlTransformers();
        StringWriter writer = new StringWriter();
        transformers.toXml(hostBytes, writer);
        System.out.println(writer.toString());
    }
+---------------------------------------
  
  This is code to turn XML into host data:
  
+---------------------------------------
    /**
     * Turns an XML into host data.
     * @return a byte array holding the mainframe payload
     * @throws HostTransformException if transforming fails
     */
    public byte[] xmlToHostTransform() throws HostTransformException {
        StringReader reader = new StringReader(
                "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>"
                + "<Dfhcommarea xmlns=\"http://legstar.com/test/coxb/lsfileae\">"
                + "<ComNumber>100</ComNumber>"
                + "<ComPersonal>"
                + "<ComName>TOTO</ComName>"
                + "<ComAddress>LABAS STREET</ComAddress>"
                + "<ComPhone>88993314</ComPhone>"
                + "</ComPersonal>"
                + "<ComDate>100458</ComDate>"
                + "<ComAmount>00100.35</ComAmount>"
                + "<ComComment>A VOIR</ComComment>"
                + "</Dfhcommarea>");
        DfhcommareaXmlTransformers transformers = new DfhcommareaXmlTransformers();
        return transformers.toHost(new StreamSource(reader));
    }
+---------------------------------------

  
DOCUMENTATION:

 Documentation available at http://www.legsem.com/legstar/legstar-coxbgen

