 -----
 Overview
 -----
 Fady Moussallam
 -----
 26 Decembre 2008
 -----

COBOL Binding Generator (Coxbgen) overview

  LegStar Coxbgen is a Java source code generator based on Data mapping XML Schemas such as the ones
  produced by {{{../legstar-schemagen}COBOL Structures Mapping Generator}}.

  Coxbgen includes an XML Schema to Java binding utility built with Sun's JAXB (More precisely as a
  JAXB XJC plugin). This capability, although bundled with Coxbgen, has its own project called
   {{{../legstar-jaxbgen}JAXB COBOL Annotator}} or Jaxbgen.
   
  Jaxbgen produces {{{https://jaxb.dev.java.net/}JAXB Classes}} with COBOL annotations. These classes are
  not different from regular JAXB Classes apart from additional Java annotations providing mapping meta-data
  between Java types and COBOL types.
  
  Coxbgen also produces runtime binding classes which provide fast conversion of COBOL mainframe data streams
  to Java instances and vice-versa. These binding classes do not use reflection at runtime which provides
  substantial performance gains.
  
  Coxbgen generated classes use the {{{../legstar-coxbapi}COBOL Binding API}}. This API shields the 
  generated code from underlying implementation.
  
  For answers to common questions about LegStar Coxbgen, see the {{{faq.html} FAQ}}.

Using Tranformers produced by COBOL Binding Generator

  Once you generate binding classes using the COBOL Binding Generator, you get a set of transformer classes
  that you can easily use to turn  mainframe payloads to java data objects.
  
  This is useful if you are not planning on using LegStar transports (LegStar transports also use transformers
  but this is automatically done for you under the hood).
  
  This is sample code showing how you would use a generated mainframe to java transformer assuming you
  just generated a transformer class called com.legstar.test.coxb.lsfileae.DfhcommareaHostToJavaTransformer.
  
+---------------------------------------
    /**
     * Transform host data and test java data object result.
     * @param hostBytes a byte array holding the mainframe payload
     * @throws HostTransformException if transforming fails
     */
    public void hostToJavaTransform(final byte[] hostBytes) throws HostTransformException {

        DfhcommareaHostToJavaTransformer transformer = new DfhcommareaHostToJavaTransformer();
        Dfhcommarea dfhcommarea = transformer.transform(hostBytes);
        System.out.println(dfhcommarea.getComNumber());
        System.out.println(dfhcommarea.getComPersonal().getComName());
        System.out.println(dfhcommarea.getComPersonal().getComAddress());
        System.out.println(dfhcommarea.getComPersonal().getComPhone());
        System.out.println(dfhcommarea.getComDate());
        System.out.println(dfhcommarea.getComAmount());
        System.out.println(dfhcommarea.getComComment());
    }
+---------------------------------------

  Conversely, you would produce a byte array with mainframe data from a java data object
  with code similar to this:
  
+---------------------------------------
    /**
     * Creates a java data object and returns the host data result.
     * @return a byte array holding the mainframe payload
     * @throws HostTransformException if transforming fails
     */
    public byte[] javaToHostTransform() throws HostTransformException {
        ObjectFactory of = new ObjectFactory();
        Dfhcommarea dfhcommarea = of.createDfhcommarea();
        dfhcommarea.setComNumber(100L);
        ComPersonal comPersonal = of.createComPersonal();
        comPersonal.setComName("TOTO");
        comPersonal.setComAddress("LABAS STREET");
        comPersonal.setComPhone("88993314");
        dfhcommarea.setComPersonal(comPersonal);
        dfhcommarea.setComDate("100458");
        dfhcommarea.setComAmount("00100.35");
        dfhcommarea.setComComment("A VOIR");
        DfhcommareaJavaToHostTransformer transformer = new DfhcommareaJavaToHostTransformer();
        return transformer.transform(dfhcommarea);
    }
+---------------------------------------
  
  Generated transformers use the default IBM01140 US EBCDIC character set for conversions. You
  can easily change this. For instance, this will create a transformer using French character
  set:
  
+---------------------------------------
        DfhcommareaJavaToHostTransformer transformer = new DfhcommareaJavaToHostTransformer("IBM01147");
+---------------------------------------
  

