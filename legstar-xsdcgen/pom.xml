<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>com.legsem.legstar</groupId>
        <artifactId>Legstar</artifactId>
        <version>1.2.7-SNAPSHOT</version>
    </parent>
    <version>1.2.7-SNAPSHOT</version>
    <artifactId>legstar-xsdcgen</artifactId>
    <name>LegStar Complex Types Mapping Generator</name>
    <description>Generates mapping XML Schema from XSD, WSDL or Java classes.</description>
    <url>http://www.legsem.com/legstar</url>

    <dependencies>

        <dependency>
            <groupId>com.legsem.legstar</groupId>
            <artifactId>legstar-codegen</artifactId>
        </dependency>
        
        <dependency>
            <groupId>com.legsem.legstar</groupId>
            <artifactId>legstar-coxbapi</artifactId>
        </dependency>

        <dependency>
            <groupId>commons-logging</groupId>
            <artifactId>commons-logging</artifactId>
        </dependency>

        <dependency>
            <groupId>org.apache.ws.commons.schema</groupId>
            <artifactId>XmlSchema</artifactId> 
        </dependency>

        <dependency>
            <groupId>javax.xml.bind</groupId>
            <artifactId>jaxb-api</artifactId>
        </dependency>

        <dependency>
            <groupId>javax.xml.bind</groupId>
            <artifactId>jsr173_api</artifactId>
        </dependency>

        <dependency>
            <groupId>com.sun.xml.bind</groupId>
            <artifactId>jaxb-impl</artifactId>
        </dependency>

        <!-- Samples distributed with xsdcgen use the JAX-WS apt task
             found here. -->
        <dependency>
            <groupId>com.sun.xml.ws</groupId>
            <artifactId>jaxws-tools</artifactId>
        </dependency>

        <dependency>
            <groupId>ant</groupId>
            <artifactId>ant</artifactId>
        </dependency>

        <!--  xsdcgen does not depend of wsdl4j yet. But since some
              Eclipse plugins (which are not Maven managed) now depend on
              wsdl4j, it is convenient to add it here. -->
        <dependency>
            <groupId>wsdl4j</groupId>
            <artifactId>wsdl4j</artifactId>
        </dependency>

        <!--  test cases will attempt to dynamically load xsdcgen-cases
              classe.  -->
        <dependency>
            <groupId>com.legsem.legstar</groupId>
            <artifactId>legstar-xsdcgen-cases</artifactId>
            <scope>test</scope>
        </dependency>
        
    </dependencies>

    <build>
        <plugins>
            
            <!-- Assembly generation plugin.  -->
            <plugin>
                <artifactId>maven-assembly-plugin</artifactId>
                <configuration>
                    <descriptors>
                        <descriptor>src/assemble/distribution.xml</descriptor>
                    </descriptors>
                </configuration>
                <executions>
                    <execution>
                        <id>make-assembly</id> <!-- this is used for inheritance merges -->
                        <phase>package</phase> <!-- append to the packaging phase. -->
                        <goals>
                            <goal>attached</goal> <!-- goals == mojos -->
                        </goals>
                    </execution>
                </executions>
            </plugin>
 
            <!-- Bundle the generated schemas in a test jar for use by other modules-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                        <configuration>
                            <classifier>test</classifier>
                            <classesDirectory>src/test/resources</classesDirectory>
                            <includes>
                                <include>schema/**</include>
                            </includes>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <artifactId>maven-antrun-plugin</artifactId>
                <executions>
                
                    <!-- Xsdcgen does access to Tomcat during the test phase (gets WSDL) -->
                    <execution>
                        <id>prepare-tests</id>
                        <phase>process-test-classes</phase>
                        <configuration>
                            <tasks>
                                <ant antfile="${basedir}/../legstar-tests/src/test/ant/build-tomcat-stop.xml">
                                    <property name="tomcat.home" value="${legstar-dev-tomcat-home}" />
                                    <property name="tomcat.base" value="${legstar-dev-tomcat-base}" />
                                </ant>
                                <ant antfile="${basedir}/../legstar-tests/src/test/ant/build-tomcat-start.xml">
                                    <property name="tomcat.home" value="${legstar-dev-tomcat-home}" />
                                    <property name="tomcat.base" value="${legstar-dev-tomcat-base}" />
                                </ant>
                            </tasks>
                        </configuration>
                        <goals>
                            <goal>run</goal>
                        </goals>
                    </execution>
                  
                    <!-- This will check that the distribution file is valid. This is also
                    used to create samples to be de delivered by upstream modules.
                    The sample uses a web service deployed in Tomcat so we need an instance -->
                    <execution>
                        <id>prepare-integration-tests</id>
                        <phase>pre-integration-test</phase>
                        <configuration>
                            <tasks>
                                <ant antfile="${basedir}/src/main/ant/test-distribution.xml" />
                            </tasks>
                        </configuration>
                        <goals>
                            <goal>run</goal>
                        </goals>
                    </execution>
                  
                    <!-- Stop Tomcat.  -->
                    <execution>
                        <id>cleanup</id>
                        <phase>post-integration-test</phase>
                        <configuration>
                            <tasks>
                                <ant antfile="${basedir}/../legstar-tests/src/test/ant/build-tomcat-stop.xml">
                                    <property name="tomcat.home" value="${legstar-dev-tomcat-home}" />
                                    <property name="tomcat.base" value="${legstar-dev-tomcat-base}" />
                                </ant>
                            </tasks>
                        </configuration>
                        <goals>
                            <goal>run</goal>
                        </goals>
                    </execution>

                    <!-- Generate site files that needs automatic update. -->
                    <execution>
                        <id>build-site</id>
                        <phase>pre-site</phase>
                        <configuration>
                            <tasks>
                                <ant antfile="${basedir}/../src/main/ant/gen-download-xml.xml">
                                    <property name="productID" value="${pom.artifactId}" />
                                    <property name="productName" value="${pom.name}" />
                                    <property name="legstarVersion" value="${legstarVersion}" />
                                </ant>
                            </tasks>
                        </configuration>
                        <goals>
                            <goal>run</goal>
                        </goals>
                    </execution>

                </executions>
            </plugin>
    
        </plugins>
    </build>
    
</project>