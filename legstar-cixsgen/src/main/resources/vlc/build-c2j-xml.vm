<?xml version="1.0" encoding="UTF-8"?>
<!-- =================================================================================
     Generate a web service proxy for mainframe programs.
     Artifacts can be used to allow remote Mainframe programs to execute
     a target Web Service operations.
     Prerequisite: Cobol binding classes should have been generated
     using Coxbgen prior to using this script.
     Refer to http://www.legsem.com/legstar for info on generating binding classes.
  -->
<project basedir="${antModel.productLocation}" default="signalSuccess" name="generate-cixs2jaxws">

    <!-- ===========================================================  -->
    <!-- Setup environment
    -->
    <target name="init">
    
        <!-- Classpath setting -->
        <path id="classpath">
            <pathelement location="${antModel.jaxbBinDir}"/>
            <pathelement location="${antModel.coxbBinDir}"/>
            <pathelement location="${antModel.custBinDir}"/>
            <fileset dir="${basedir}" includes="lib/*.jar" />
        </path>
        
        <!-- Service Proxy Generator ant task -->
        <taskdef name="cixs2jaxwsgen"
            classname="com.legstar.cixs.jaxws.gen.Cixs2JaxwsGenerator"
            classpathref="classpath" 
        /> 
    
    </target>

    <!-- ===========================================================  -->
    <!-- This step creates all the artifacts for a service.  -->
    
    <target name="generateCixs2Jaxws" depends="init">
    
        <cixs2jaxwsgen
            targetAntDir="${antModel.targetAntDir}"
            targetWDDDir="${antModel.targetWDDDir}"
            targetWarDir="${antModel.targetWarDir}"
            targetCobolDir="${antModel.targetCobolDir}"
            jaxbBinDir="${antModel.jaxbBinDir}"
            coxbBinDir="${antModel.coxbBinDir}"
            custBinDir="${antModel.custBinDir}"
            hostCharset="${antModel.hostCharset}"
        >
            <cixsJaxwsService name="${antModel.cixsJaxwsService.name}"
                wsdlUrl="${antModel.cixsJaxwsService.wsdlUrl}"
                wsdlPortName="${antModel.cixsJaxwsService.wsdlPortName}"
                wsdlServiceName="${antModel.cixsJaxwsService.wsdlServiceName}"
                targetNamespace="${antModel.cixsJaxwsService.targetNamespace}"
                serviceURI="${antModel.cixsJaxwsService.serviceURI}"
            >
#foreach ($cixsOperation in $antModel.cixsJaxwsService.cixsOperations)
                <cixsOperation name="${cixsOperation.name}"
                    cicsProgramName="${cixsOperation.cicsProgramName}"
                >
#foreach ($cixsStructure in $cixsOperation.input)
                    <input
                        jaxbType="${cixsStructure.jaxbType}"
                        jaxbPackageName="${cixsStructure.jaxbPackageName}"
                    />
#end
#foreach ($cixsStructure in $cixsOperation.output)
                    <output
                        jaxbType="${cixsStructure.jaxbType}"
                        jaxbPackageName="${cixsStructure.jaxbPackageName}"
                    />
#end
                </cixsOperation>
#end
            </cixsJaxwsService>
        </cixs2jaxwsgen>
    
    </target>
   
    <!-- ===========================================================  -->
    <!-- Delete the probe file to signal success
    -->
    <target name="signalSuccess" depends="generateCixs2Jaxws">
        <delete file="${antModel.probeFile}" quiet="true"/>
    </target>
  
</project>