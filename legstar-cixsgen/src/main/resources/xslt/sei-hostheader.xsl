<?xml version="1.0" encoding="UTF-8"?>
<!-- ===============================================================================================
	 XSLT for Host header class generation. This class maps to elements in the
	 SOAP header to allow clients to act on connectivity parameters.
 -->
<xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<xsl:output method="text" omit-xml-declaration="yes" indent="yes"/>
<xsl:template match="/"><xsl:apply-templates select="cixs-service"/></xsl:template>

<!-- Generate the host header class -->
<xsl:template match="cixs-service">
	<!-- Determine the host header java source file name -->
	<xsl:variable name="hostheader-class-name">
		<xsl:choose>
			<xsl:when test="string-length(endpoint-interface) > 0"><xsl:value-of select="endpoint-interface"/>HostHeader</xsl:when>
			<xsl:otherwise><xsl:value-of select="concat(upper-case(substring(service-name,1,1)),substring(service-name,2))"/>HostHeader</xsl:otherwise>
		</xsl:choose>
	</xsl:variable>
	<xsl:variable name="target-dir">
		<xsl:value-of select="translate(service-endpoint-package,'.','/')"/>
	</xsl:variable>
	
	<!-- Generate the dynamically built java source file -->
	<xsl:result-document href="{$target-dir}/{$hostheader-class-name}.java" method="text" omit-xml-declaration="yes" indent="yes">
		<xsl:call-template name="generate-header"/>
		<xsl:call-template name="generate-interface">
			<xsl:with-param name="hostheader-class-name"><xsl:value-of select="$hostheader-class-name"/></xsl:with-param>
		</xsl:call-template>
	</xsl:result-document>

</xsl:template>

<!-- ===============================================================================================
	 Generate the package and import code
 -->
<xsl:template name="generate-header">
package <xsl:value-of select="service-endpoint-package"/>;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;

/**
 * Configuration parameters that a client can send as a SOAP header element.
 * 
 * This class was generated by CIXS generator.
 * <xsl:value-of  select="current-dateTime()"/>
 */
</xsl:template>

<!-- ===============================================================================================
	 Generate the code of the host header
 -->
<xsl:template name="generate-interface">
<xsl:param name="hostheader-class-name"/>
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "<xsl:value-of select="$hostheader-class-name"/>",
         namespace = "<xsl:value-of select="service-targetnamespace"/>",
         propOrder = {
    "hostUserID", 
	"hostPassword", 
	"hostEndPoint", 
	"hostCharset", 
	"hostTraceMode", 
	"hostRequestID"  
})
public class <xsl:value-of select="$hostheader-class-name"/> {
	
    /** User ID used for host authentication/impersonation. */
    @XmlElement(name = "hostUserID",
                namespace = "<xsl:value-of select="service-targetnamespace"/>",
                required = false)
    private String hostUserID;

    /** Password used for authentication. */
    @XmlElement(name = "hostPassword",
                namespace = "<xsl:value-of select="service-targetnamespace"/>",
                required = false)
    private String hostPassword;

    /** The host endpoint identifier. */
    @XmlElement(name = "hostEndPoint",
                namespace = "<xsl:value-of select="service-targetnamespace"/>",
                required = false)
    private String hostEndPoint;

    /** The host character set. */
    @XmlElement(name = "hostCharset",
                namespace = "<xsl:value-of select="service-targetnamespace"/>",
                required = false)
    private String hostCharset;

    /** Whether the host should trace this request. */
    @XmlElement(name = "hostTraceMode",
                namespace = "<xsl:value-of select="service-targetnamespace"/>",
                required = false)
    private boolean hostTraceMode = false;

    /** An identifier for this request (used for tracability). */
    @XmlElement(name = "hostRequestID",
                namespace = "<xsl:value-of select="service-targetnamespace"/>",
                required = false)
    private String hostRequestID = "<xsl:value-of select="service-name"/>";

	/** Gets the user ID used for host authentication/impersonation.
	 * @return host user ID
	 */
	public final String getHostUserID() {
		return hostUserID;
	}

	/**
	 * Sets the user ID used for host authentication/impersonation.
	 * @param userID host user ID to set
	 */
	public final void setHostUserID(final String userID) {
		this.hostUserID = userID;
	}

	/** 
	 * Gets the password used for authentication.
	 * @return host user ID
	 */
	public final String getHostPassword() {
		return hostPassword;
	}

	/**
	 * Sets the password used for authentication.
	 * @param password host user ID to set
	 */
	public final void setHostPassword(final String password) {
		this.hostPassword = password;
	}

	/**
	 * Gets the target host identifier.
	 * @return the target host identifier
	 */
	public final String getHostEndPoint() {
		return hostEndPoint;
	}

	/**
	 * Sets the target host identifier.
	 * @param endPoint target host identifier
	 */
	public final void setHostEndPoint(final String endPoint) {
		this.hostEndPoint = endPoint;
	}

	/**
	 * Gets the target host character set.
	 * @return the target host character set
	 */
	public final String getHostCharset() {
		return hostCharset;
	}

	/**
	 * Sets the target host character set.
	 * @param charset target host character set
	 */
	public final void setHostCharset(final String charset) {
		this.hostCharset = charset;
	}

	/**
	 * Gets the host trace mode.
	 * @return the host trace mode
	 */
	public final boolean getHostTraceMode() {
		return hostTraceMode;
	}

	/**
	 * Sets the host trace mode.
	 * @param traceMode the host trace mode
	 */
	public final void setTraceMode(final boolean traceMode) {
		this.hostTraceMode = traceMode;
	}

	/**
	 * Gets the identifier for this request.
	 * @return the request identifier
	 */
	public final String getHostRequestID() {
		return hostRequestID;
	}

	/**
	 * Sets the identifier for this request.
	 * @param requestID the identifier for this request
	 */
	public final void setHostRequestID(final String requestID) {
		this.hostRequestID = requestID;
	}

}

</xsl:template>

</xsl:stylesheet>
