 -----
 LegStar Cixsgen
 -----
 Fady Moussallam
 -----
 27 June 2008
 -----

Web Service Generator (Cixsgen) overview

  LegStar Cixsgen has 2 main generator tasks:
 
  * Web Service Adapter Generator which expose mainframe programs as JAXWS endpoints.

  * Mainframe Proxy Generator which give mainframe programs outbound access to remote Web services.
    
Web Service Adapters:

  These are JAXWS endpoints, implemented as a set of generated Java classes. When deployed in a
  suitable container (such as Apache Tomcat or Jetty) the mainframe programs are in effect, Web Service enabled.
  
  Before the JAXWS endpoint can be generated, you must create a set of JAXB binding
  classes, with COBOL annotations (such as generated by {{{../legstar-coxbgen}COBOL Binding Generator}}).
  Binding classes map JAXB objects to COBOL input and output structures expected by the
  target mainframe program.
  
  Cixsgen generates various artifacts:
 
  * Java classes implementing a JAXWS enpoint.
  
  * Web descriptors for deployment in a servlet engine such as Tomcat or Jetty.
  
  * Ant script that automates the deployment to Tomcat or Jetty.
  
  []
  
  From a connectivity standpoint, the generated JAXWS endpoint uses the
  {{{../legstar-invoker}Mainframe Invoker Runtime}} module. There are multiple transports available.
  
Mainframe Proxies:

  They are implemented as Servlets which can be deployed into Tomcat or Jetty. The mainframe
  calls the proxy servlet which, in turn, calls the target Web service.

  The mainframe communicates with the servlet proxy over HTTP, using the same binary protocol as
  {{{../legstar-chttprt}HTTP Transport}}. The details can be found at {{{../legstar-c2wsrt}Mainframe to Web Service runtime}}.
  
  Before the proxy servlet can be generated, you must create a set of JAXB binding
  classes, with COBOL annotations (such as generated by {{{../legstar-coxbgen}COBOL Binding Generator}}).
  The binding generator works on a mapping XML schema that you can produce using
  {{{../legstar-xsdcgen}Complex Types Mapping Generator}} starting from an XSD,
   WSDL or Java classes.

  Cixsgen generates various artifacts:
 
  * Web descriptors for deployment in a servlet engine such as Tomcat or Jetty.
  
  * A sample COBOL program that demonstrates how to call the remote Web Service.

  * Ant script that automates the deployment to Tomcat or Jetty.
  
  []

  For answers to common questions about LegStar Cixsgen, see the {{{faq.html}FAQ}}.
  
Running the Ant scripts
  
  The build-jws2cixs.xml ant script shows how to generate a Web Service adapter for a commarea-driven
  program.
  
  Service generator supports container-driven programs. This is how you would use the
  ant task for a CICS program that takes 2 containers on input and produces 2 containers on
  out:
  
+------------------
    <cixsgen targetSrcDir="${cixs.src.dir}"
             targetBinDir="${cixs.bin.dir}"
             targetWDDDir="${wdd.dir}"
             targetPropDir="${prop.dir}"
             targetAntDir="${ant.dir}"
             targetWarDir="${war.dir}"
             jaxbBinDir="${jaxb.bin.dir}"
             coxbBinDir="${coxb.bin.dir}"
             custBinDir="${cust.bin.dir}"
      >
      <cixsJaxwsService name="${service}"
        packageName="${cixs.package.pfx}.${service}"
        targetNamespace="${cixs.namespace.pfx}/${service}">
        <cixsOperation name="${service}"
          cicsProgramName="${service}"
          cicsChannel="LSFILEAC-CHANNEL">
          <input
            jaxbType="QueryDataType"
            jaxbPackageName="${jaxb.package.pfx}.${service}"
            cicsContainer="QueryData"
          />
          <input
            jaxbType="QueryLimitType"
            jaxbPackageName="${jaxb.package.pfx}.${service}"
            cicsContainer="QueryLimit"
          />
          <output
            jaxbType="ReplyStatusType"
            jaxbPackageName="${jaxb.package.pfx}.${service}"
            cicsContainer="ReplyStatus"
          />
          <output
            jaxbType="ReplyDataType"
            jaxbPackageName="${jaxb.package.pfx}.${service}"
            cicsContainer="ReplyData"
          />
        </cixsOperation>
      </cixsJaxwsService>
    </cixsgen>
+------------------

  The build-cixs2jws.xml ant script shows how to generate a Mainframe proxy.

