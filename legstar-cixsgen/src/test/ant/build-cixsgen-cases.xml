<?xml version="1.0" encoding="UTF-8"?>
<!-- =================================================================================
     This script creates all artifacts needed for a JAXWS endpoint using
     COXB cobol binding to JAXB and CIXS connectivity.
  -->
<project basedir="..\..\.." default="generateAllServices" name="generate-service">

	<!-- ===========================================================  -->
	<!-- Setup environment
	  -->
	<target name="init">

		<!-- Target Tomcat location   -->
        <property file="../legstar-dev.properties"/>   
		<!-- Location of XML schemas  -->
	 	<property name="xsd.dir" value="${basedir}/../legstar-schemagen/src/test/schema" />
		<!-- Location of CIXS target source location   -->
		<property name="cixs.src.dir" value="${basedir}/../legstar-cixsgen-cases/src/main/java"/>
		<!-- Target location for generated CIXS binaries   -->
		<property name="cixs.bin.dir" value="${basedir}/../legstar-cixsgen-cases/target/classes"/>
		<!-- Location of JAXB and binding classes   -->
		<property name="jaxb.bin.dir" value="${basedir}/../legstar-jaxbgen-cases/target/classes"/>
		<!-- Location of COXB and binding classes   -->
		<property name="coxb.bin.dir" value="${basedir}/../legstar-coxbgen-cases/target/classes"/>
		<!-- Location of custom code classes   -->
		<property name="cust.bin.dir" value="${basedir}/../legstar-coxbgen-cases/target/classes"/>
		<!-- Location of generated resources   -->
		<property name="res.dir" value="${basedir}/../legstar-cixsgen-cases/src/main/resources"/>
		<!-- Generated Ant target script relative location   -->
		<property name="ant.dir" value="ant"/>
		<!-- Generated Web descriptors target relative location   -->
		<property name="wdd.dir" value="WebContent/WEB-INF"/>
		<!-- Generated Properties files target relative location   -->
		<property name="prop.dir" value="${wdd.dir}/classes"/>
		<!-- War files target location   -->
		<property name="war.dir" value="${tomcat.dir}\webapps"/>
		<!-- Package name prefix for JAXB classes   -->
		<property name="jaxb.package.pfx" value="com.legstar.test.coxb"/>
		<!-- Package name prefix for CIXS classes   -->
		<property name="cixs.package.pfx" value="com.legstar.test.cixs"/>
		<!-- Namespace prefix for CIXS WSDL   -->
		<property name="cixs.namespace.pfx" value="http://cixs.test.legstar.com"/>
		<!-- Location of test resources   -->
		<property name="test.res.dir" value="${basedir}/../legstar-cixsgen-cases/src/test/resources"/>
				
		<!-- Service Generator ant task -->
		<taskdef name="cixsgen"
			classname="com.legstar.cixs.jaxws.gen.Jaxws2CixsGenerator"
			classpathref="maven.classpath" 
		/> 

		<!-- Ant-Contrib tasks. Needed for "foreach ", regex, switch, ...
		     (ant-contrib.jar must be in ant classpath) -->
		<taskdef resource="net/sf/antcontrib/antcontrib.properties"/>
		
		<!-- Make sure we have target source directories -->
		<mkdir dir="${cixs.src.dir}"/>
		<mkdir dir="${cixs.bin.dir}"/>
 		
	</target>

	<!-- ===========================================================  -->
	<!-- Generate a service for each XML schema in a given folder
	     excluding those with JAXB input != output or not named
	     Dfhcommarea.
	     Then individually generate other services.
	  -->
	<target name="generateAllServices" depends="init">
		<foreach target="generateService" param="xsd.file" inheritrefs="true" inheritall="true">
			<path>
				<fileset dir="${xsd.dir}" includes="*.xsd">
					<exclude name="clegtstc.cbl.xsd"/>
					<exclude name="lsfileal.xsd"/>
					<exclude name="lsfileac.xsd"/>
					<exclude name="enumvar.xsd"/>
                    <exclude name="cultureinfo.xsd"/>
                    <exclude name="jvmquery.xsd"/>
                    <exclude name="MSNSearch.xsd"/>
                    <exclude name="jvmquery-ws.xsd"/>
                    <exclude name="varar021.xsd"/>
				</fileset>
			</path>
		</foreach>
		<antcall target="generateLsfilealService"/>
		<antcall target="generateLsfileacService"/>
		<antcall target="generateLsfileaxService"/>
		<antcall target="generateVarar021Service"/>
		<antcall target="copyPropertiesForTesting"/>
	</target>

	<!-- ===========================================================  -->
	<!-- This step creates all the artifacts for a service.
	     All parameters are derived from the XML schema file name  -->
	
	<target name="generateService">
		<basename property="service" file="${xsd.file}" suffix="xsd"/>
		
		<cixsgen targetSrcDir="${cixs.src.dir}"
		         targetBinDir="${cixs.bin.dir}"
		         targetWDDDir="${res.dir}/${service}/${wdd.dir}"
			     targetPropDir="${res.dir}/${service}/${prop.dir}"
			     targetAntDir="${res.dir}/${service}/${ant.dir}"
		         targetWarDir="${war.dir}"
		         jaxbBinDir="${jaxb.bin.dir}"
	         	 coxbBinDir="${coxb.bin.dir}"
	             custBinDir="${cust.bin.dir}"
			>
			<cixsJaxwsService name="${service}"
				packageName="${cixs.package.pfx}.${service}"
				targetNamespace="${cixs.namespace.pfx}/${service}">
				<cixsOperation name="${service}"
					cicsProgramName="${service}">
					<input
						jaxbType="Dfhcommarea"
						jaxbPackageName="${jaxb.package.pfx}.${service}"
					/>
					<output
						jaxbType="Dfhcommarea"
						jaxbPackageName="${jaxb.package.pfx}.${service}"
					/>
				</cixsOperation>
			</cixsJaxwsService>
		</cixsgen>
		
  	</target>
	
	<!-- ===========================================================  -->
	<!-- This step creates a Web Service for Lsfileal which happens
	     to have a different input/output layout.   -->
	
	<target name="generateLsfilealService">
		
		<cixsgen targetSrcDir="${cixs.src.dir}"
	             targetBinDir="${cixs.bin.dir}"
		         targetWDDDir="${res.dir}/lsfileal/${wdd.dir}"
			     targetPropDir="${res.dir}/lsfileal/${prop.dir}"
			     targetAntDir="${res.dir}/lsfileal/${ant.dir}"
		         targetWarDir="${war.dir}"
		         jaxbBinDir="${jaxb.bin.dir}"
	        	 coxbBinDir="${coxb.bin.dir}"
	             custBinDir="${cust.bin.dir}"
			>
			<cixsJaxwsService name="lsfileal"
				packageName="${cixs.package.pfx}.lsfileal"
				targetNamespace="${cixs.namespace.pfx}/lsfileal">
				<cixsOperation name="lsfileal"
					cicsProgramName="lsfileal">
					<input
						jaxbType="RequestParms"
						jaxbPackageName="${jaxb.package.pfx}.lsfileal"
					/>
					<output
						jaxbType="ReplyData"
						jaxbPackageName="${jaxb.package.pfx}.lsfileal"
					/>
				</cixsOperation>
			</cixsJaxwsService>
		</cixsgen>
		
  	</target>

	<!-- ===========================================================  -->
	<!-- This step creates a Web Service for Lsfileac which has
	     multiple input and output structures.   -->
	
	<target name="generateLsfileacService">
		
		<cixsgen targetSrcDir="${cixs.src.dir}"
			     targetBinDir="${cixs.bin.dir}"
		         targetWDDDir="${res.dir}/lsfileac/${wdd.dir}"
			     targetPropDir="${res.dir}/lsfileac/${prop.dir}"
			     targetAntDir="${res.dir}/lsfileac/${ant.dir}"
		         targetWarDir="${war.dir}"
		         jaxbBinDir="${jaxb.bin.dir}"
		       	 coxbBinDir="${coxb.bin.dir}"
	             custBinDir="${cust.bin.dir}"
			>
			<cixsJaxwsService name="lsfileac"
				packageName="${cixs.package.pfx}.lsfileac"
				targetNamespace="${cixs.namespace.pfx}/lsfileac">
				<cixsOperation name="lsfileac"
					cicsProgramName="lsfileac"
					cicsChannel="LSFILEAC-CHANNEL">
					<input
						jaxbType="QueryData"
						jaxbPackageName="${jaxb.package.pfx}.lsfileac"
						cicsContainer="QueryData"
					/>
					<input
						jaxbType="QueryLimit"
						jaxbPackageName="${jaxb.package.pfx}.lsfileac"
						cicsContainer="QueryLimit"
					/>
					<output
						jaxbType="ReplyStatus"
						jaxbPackageName="${jaxb.package.pfx}.lsfileac"
						cicsContainer="ReplyStatus"
					/>
					<output
						jaxbType="ReplyData"
						jaxbPackageName="${jaxb.package.pfx}.lsfileac"
						cicsContainer="ReplyData"
					/>
				</cixsOperation>
			</cixsJaxwsService>
		</cixsgen>
		
  	</target>
	
	<!-- ===========================================================  -->
	<!-- This step creates a Web Service for Lsfileax which happens
	     to have 2 operations.   -->
	
	<target name="generateLsfileaxService">
		
		<cixsgen targetSrcDir="${cixs.src.dir}"
	             targetBinDir="${cixs.bin.dir}"
		         targetWDDDir="${res.dir}/lsfileax/${wdd.dir}"
			     targetPropDir="${res.dir}/lsfileax/${prop.dir}"
			     targetAntDir="${res.dir}/lsfileax/${ant.dir}"
		         targetWarDir="${war.dir}"
		         jaxbBinDir="${jaxb.bin.dir}"
	        	 coxbBinDir="${coxb.bin.dir}"
	             custBinDir="${cust.bin.dir}"
			>
			<cixsJaxwsService name="lsfileax"
				packageName="${cixs.package.pfx}.lsfileax"
				targetNamespace="${cixs.namespace.pfx}/lsfileax">
				<cixsOperation name="lsfileae"
					cicsProgramName="LSFILEAE">
					<input
						jaxbType="Dfhcommarea"
						jaxbPackageName="${jaxb.package.pfx}.lsfileae"
					/>
					<output
						jaxbType="Dfhcommarea"
						jaxbPackageName="${jaxb.package.pfx}.lsfileae"
					/>
				</cixsOperation>
				<cixsOperation name="lsfileac"
					cicsProgramName="lsfileac"
					cicsChannel="LSFILEAC-CHANNEL">
					<input
						jaxbType="QueryData"
						jaxbPackageName="${jaxb.package.pfx}.lsfileac"
						cicsContainer="QueryData"
					/>
					<input
						jaxbType="QueryLimit"
						jaxbPackageName="${jaxb.package.pfx}.lsfileac"
						cicsContainer="QueryLimit"
					/>
					<output
						jaxbType="ReplyStatus"
						jaxbPackageName="${jaxb.package.pfx}.lsfileac"
						cicsContainer="ReplyStatus"
					/>
					<output
						jaxbType="ReplyData"
						jaxbPackageName="${jaxb.package.pfx}.lsfileac"
						cicsContainer="ReplyData"
					/>
				</cixsOperation>
			</cixsJaxwsService>
		</cixsgen>
		
  	</target>

	<!-- ===========================================================  -->
	<!-- This step creates a Web Service for varar021 a case with
	     variable size input and outputs.   -->
	
	<target name="generateVarar021Service">
		
		<cixsgen targetSrcDir="${cixs.src.dir}"
	             targetBinDir="${cixs.bin.dir}"
		         targetWDDDir="${res.dir}/varar021/${wdd.dir}"
			     targetPropDir="${res.dir}/varar021/${prop.dir}"
			     targetAntDir="${res.dir}/varar021/${ant.dir}"
		         targetWarDir="${war.dir}"
		         jaxbBinDir="${jaxb.bin.dir}"
	        	 coxbBinDir="${coxb.bin.dir}"
	             custBinDir="${cust.bin.dir}"
			>
			<cixsJaxwsService name="varar021"
				packageName="${cixs.package.pfx}.varar021"
				targetNamespace="${cixs.namespace.pfx}/varar021">
				<cixsOperation name="varar021"
					cicsProgramName="VARAR021">
					<input
						jaxbType="SearchGrplst"
						jaxbPackageName="${jaxb.package.pfx}.varar021"
					/>
					<output
						jaxbType="SearchGrplst"
						jaxbPackageName="${jaxb.package.pfx}.varar021"
					/>
				</cixsOperation>
			</cixsJaxwsService>
		</cixsgen>
		
  	</target>

	<!-- ===========================================================  -->
	<!-- This step propagates the properties files which are located
	     in a folder that is convenient for distribution:
	      src/main/resources/${service}/WebContent/WEB-INF/classes
	     to a location where they can be used for direct testing
	     (without deployment):  src/test/resources.   -->
	
	<target name="copyPropertiesForTesting">
		<copy todir="${test.res.dir}" flatten="true">
			<fileset dir="${res.dir}" includes="**/*.properties"/>
		</copy>
  	</target>

</project>