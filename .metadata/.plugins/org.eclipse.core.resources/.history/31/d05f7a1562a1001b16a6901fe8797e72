package com.legstar.eclipse.plugin.schemagen.actions;

import org.eclipse.jface.action.IAction;
import org.eclipse.jface.viewers.ISelection;
import org.eclipse.ui.IWorkbenchWindow;
import org.eclipse.ui.IWorkbenchWindowActionDelegate;

import com.legstar.eclipse.plugin.schemagen.wizards.RunWizardAction;
import com.legstar.eclipse.plugin.schemagen.Activator;

/**
 * Our sample action implements workbench action delegate.
 * The action proxy will be created by the workbench and
 * shown in the UI. When the user tries to use the action,
 * this delegate will be created and execution will be 
 * delegated to it.
 * @see IWorkbenchWindowActionDelegate
 */
public class SchemaGenAction implements IWorkbenchWindowActionDelegate {
	
	/** Top level window in the workbench. */
	@SuppressWarnings("unused")
	private IWorkbenchWindow mWindow;
	
	/**
	 * The constructor.
	 */
	public SchemaGenAction() {
	}

	/**
	 * The action has been activated. The argument of the
	 * method represents the 'real' action sitting
	 * in the workbench UI.
	 * @see IWorkbenchWindowActionDelegate#run
     * @param action the action proxy that handles the presentation portion of
     *   the action
	 */
	public final void run(
			final IAction action) {
		RunWizardAction runWizard;
		runWizard = new RunWizardAction();
		runWizard.run(action);
	}

	/**
	 * Selection in the workbench has been changed. We 
	 * can change the state of the 'real' action here
	 * if we want, but this can only happen after 
	 * the delegate has been created.
	 * @see IWorkbenchWindowActionDelegate#selectionChanged
     * @param action the action proxy that handles presentation portion of 
     * 		the action
     * @param selection the current selection, or <code>null</code> if there
     * 		is no selection.
	 */
	public void selectionChanged(
			final IAction action, final ISelection selection) {
	}

	/**
	 * We can use this method to dispose of any system
	 * resources we previously allocated.
	 * @see IWorkbenchWindowActionDelegate#dispose
	 */
	public void dispose() {
	}

	/**
	 * We will cache window object in order to
	 * be able to provide parent shell for the message dialog.
	 * @see IWorkbenchWindowActionDelegate#init
     * @param window the window that provides the context for this delegate
	 */
	public final void init(
			final IWorkbenchWindow window) {
		mWindow = window;
	}
}
