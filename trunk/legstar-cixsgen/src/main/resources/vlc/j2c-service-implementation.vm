##/////////////////////////////////////////////////////////////////////
##Jaxws Service Adapter implementation Template.
##@author Fady
##@version 1.2.3
##/////////////////////////////////////////////////////////////////////
#parse("vlc/j2c-service-common-imports.vm")
## ==================================================================
## Create unique Lists of imports and Types
##
#set($importTypes = [])
#set($jaxbTypes = [])
#foreach ($cixsOperation in $model.cixsOperations)
#getImportTypes(${cixsOperation.getInput()})
#getImportTypes(${cixsOperation.getOutput()})
##
## if operations are in a different package than the service, we
## need to import the Operation invokers as well
##
#if($cixsOperation.packageName && $cixsOperation.packageName != $model.packageName)
#set($operationInvokerType = ${cixsOperation.className} + "OperationInvoker")
#set($newType = ${helper.getQualClassName(${cixsOperation.packageName}, $operationInvokerType)})
#addUnique($importTypes $newType)
#end
#end
## ==================================================================
#parse("vlc/j2c-service-common-package.vm")
import java.rmi.server.UID;
import javax.jws.WebService;

import com.legstar.host.invoke.AbstractServiceAdapter;
import com.legstar.messaging.LegStarAddress;
#foreach($importType in $importTypes)
import ${importType};
#end

/**
 * JAX-WS Service Adapter implementation.
 * Each method maps to a CICS program. 
 * 
 * This class was generated by ${generatorName}.
 * Generated on $formattedDate
 */
@WebService(endpointInterface = "${helper.getQualClassName(${model.packageName}, ${model.interfaceClassName})}",
            serviceName = "${model.wsdlServiceName}",
            targetNamespace = "${model.targetNamespace}")
public class ${model.implementationClassName} extends AbstractServiceAdapter implements ${model.interfaceClassName} {

    /** Name of this service adapter implementation. */
    private static final String  SERVICE_ADAPTER_NAME = "${model.name}";

#foreach ($cixsOperation in $model.cixsOperations)
    /** Invoker implementation for operation ${cixsOperation.name}. */
    private ${cixsOperation.className}OperationInvoker m${cixsOperation.className}OperationInvoker;

#end
    /** Contructor creates a set of operation invokers. */
    public ${model.implementationClassName}() {
        super(SERVICE_ADAPTER_NAME);
#foreach ($cixsOperation in $model.cixsOperations)
        m${cixsOperation.className}OperationInvoker = new ${cixsOperation.className}OperationInvoker(getConfigFileName());
#end
    }
    
#foreach ($cixsOperation in $model.cixsOperations)
    /** {@inheritDoc} */
    public final $cixsOperation.responseHolderType ${cixsOperation.name}(
               final $cixsOperation.requestHolderType request,
               final ${model.headerClassName} hostHeader)
               throws ${cixsOperation.faultType} {
    
        return get${cixsOperation.className}OperationInvoker().${cixsOperation.name}(
                getAddress(hostHeader), getRequestID(hostHeader), request);
    }
#end
        
    /**
     * Extracts header data from SOAP header and create a host address.
     * @param hostHeader the java object mapping the SOAP header element
     * @return the new host address
     */
    public LegStarAddress getAddress(
            final ${model.headerClassName} hostHeader) {
        if (hostHeader == null) {
            return null;
        }
        LegStarAddress address = new LegStarAddress(hostHeader.getHostEndPoint());
        address.setHostCharset(hostHeader.getHostCharset());
        address.setHostUserID(hostHeader.getHostUserID());
        address.setHostPassword(hostHeader.getHostPassword());
        address.setHostTraceMode(hostHeader.getHostTraceMode());
        return address;
    }

    /**
     * Generates a unique ID for a request. This can be passed from the client
     * using the host header.
     * @param hostHeader the java object mapping the SOAP header element
     * @return  a unique request ID
     */
    public String getRequestID(final ${model.headerClassName} hostHeader) {
        if (hostHeader != null && hostHeader.getHostRequestID() != null) {
            return hostHeader.getHostRequestID();
        } else {
            return getServiceAdapterName() + ":" + new UID().toString();
        }
    }

#foreach ($cixsOperation in $model.cixsOperations)
    /**
     * @return the invoker implementation for operation ${cixsOperation.name}
     */
    public ${cixsOperation.className}OperationInvoker get${cixsOperation.className}OperationInvoker() {
        return m${cixsOperation.className}OperationInvoker;
    }

    /**
     * @param operationInvoker the invoker implementation for operation ${cixsOperation.name} to set
     */
    public void set${cixsOperation.className}OperationInvoker(
            final ${cixsOperation.className}OperationInvoker operationInvoker) {
        m${cixsOperation.className}OperationInvoker = operationInvoker;
    }
    
#end
}
