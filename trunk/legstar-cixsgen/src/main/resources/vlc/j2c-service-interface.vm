##/////////////////////////////////////////////////////////////////////
##Jaxws Component Interface Velocity Template.
##@author Fady
##@version 1.2.3
##/////////////////////////////////////////////////////////////////////
#parse("vlc/j2c-service-common-imports.vm")
## ==================================================================
## Create unique Lists of imports and Types
##
#set($importTypes = [])
#set($jaxbTypes = [])
#foreach ($cixsOperation in $model.cixsOperations)
#getImportTypes(${cixsOperation.getInput()})
#getImportTypes(${cixsOperation.getOutput()})
#end
## ==================================================================
#parse("vlc/j2c-service-common-package.vm")
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;

#foreach($importType in $importTypes)
import ${importType};
#end
/**
 * LegStar/Jaxws Component interface.
 * Each method maps to a CICS program. 
 * 
 * This class was generated by ${generatorName}.
 */
@WebService(name = "${wsdlPortName}",
            targetNamespace = "${model.namespace}")
public interface ${model.interfaceClassName} {
  
#foreach ($cixsOperation in $model.cixsOperations)
    /**
     * LegStar operation ${cixsOperation.name}.
     * 
     * @param request a JAXB object mapping the request
     * @param hostHeader an object mapping header parameters
     * @return a JAXB object mapping the reply
     * @throws ${cixsOperation.faultType} if method fails
     */
    @WebMethod(operationName = "${cixsOperation.name}", action = "urn:${cixsOperation.name}")
    @WebResult(name = "${cixsOperation.responseHolderType}",
        targetNamespace = "${cixsOperation.responseHolderNamespace}")
    @RequestWrapper(localName = "${cixsOperation.requestWrapperType}",
        targetNamespace = "${cixsOperation.namespace}",
        className = "${helper.getQualClassName(${cixsOperation.packageName}, ${cixsOperation.requestWrapperType})}")
    @ResponseWrapper(localName = "${cixsOperation.responseWrapperType}",
        targetNamespace = "${cixsOperation.namespace}",
        className = "${helper.getQualClassName(${cixsOperation.packageName}, ${cixsOperation.responseWrapperType})}")
    $cixsOperation.responseHolderType ${cixsOperation.name}(
        @WebParam(name = "${cixsOperation.requestHolderType}",
               targetNamespace = "${cixsOperation.requestHolderNamespace}")
            $cixsOperation.requestHolderType request,
        @WebParam(name = "${model.headerClassName}", header = true, partName = "hostHeader",
                targetNamespace = "${cixsOperation.namespace}")
            ${model.headerClassName} hostHeader)
        throws ${cixsOperation.faultType};
        
#end
}
