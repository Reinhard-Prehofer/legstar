<?xml version="1.0" encoding="UTF-8"?>
<!-- ===============================================================================================
	 XSLT for Host header class generation. This class maps to elements in the
	 SOAP header to allow clients to act on connectivity parameters.
 -->
<xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<xsl:output method="text" omit-xml-declaration="yes" indent="yes"/>
<xsl:template match="/"><xsl:apply-templates select="cixs-service"/></xsl:template>

<!-- Generate the host header class -->
<xsl:template match="cixs-service">
	<!-- Determine the host header java source file name -->
	<xsl:variable name="hostheader-class-name">
		<xsl:choose>
			<xsl:when test="string-length(endpoint-interface) > 0"><xsl:value-of select="endpoint-interface"/>HostHeader</xsl:when>
			<xsl:otherwise><xsl:value-of select="concat(upper-case(substring(service-name,1,1)),substring(service-name,2))"/>HostHeader</xsl:otherwise>
		</xsl:choose>
	</xsl:variable>
	<xsl:variable name="target-dir">
		<xsl:value-of select="translate(service-endpoint-package,'.','/')"/>
	</xsl:variable>
	
	<!-- Generate the dynamically built java source file -->
	<xsl:result-document href="{$target-dir}/{$hostheader-class-name}.java" method="text" omit-xml-declaration="yes" indent="yes">
		<xsl:call-template name="generate-header"/>
		<xsl:call-template name="generate-interface">
			<xsl:with-param name="hostheader-class-name"><xsl:value-of select="$hostheader-class-name"/></xsl:with-param>
		</xsl:call-template>
	</xsl:result-document>

</xsl:template>

<!-- ===============================================================================================
	 Generate the package and import code
 -->
<xsl:template name="generate-header">
package <xsl:value-of select="service-endpoint-package"/>;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;

/**
 * Host connectivity related elements that clients can act upon.
 * 
 * This class was generated by CIXS version 1.0.
 * <xsl:value-of  select="current-dateTime()"/>
 */
</xsl:template>

<!-- ===============================================================================================
	 Generate the code of the host header
 -->
<xsl:template name="generate-interface">
<xsl:param name="hostheader-class-name"/>
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "<xsl:value-of select="$hostheader-class-name"/>",
         namespace = "<xsl:value-of select="service-targetnamespace"/>",
         propOrder = {
    "hostUser", 
	"hostPassword", 
	"hostIPAddress", 
	"hostIPPort", 
	"hostCICWPath" 
})
public class <xsl:value-of select="$hostheader-class-name"/> {
	
    /** User ID used for host authentication/impersonation. */
    @XmlElement(name = "hostUser",
                namespace = "<xsl:value-of select="service-targetnamespace"/>",
                required = true)
    private String hostUser;

    /** Password used for authentication. */
    @XmlElement(name = "hostPassword",
                namespace = "<xsl:value-of select="service-targetnamespace"/>",
                required = true)
    private String hostPassword;

    /** TCPIP address of the Host. */
    @XmlElement(name = "hostIPAddress",
                namespace = "<xsl:value-of select="service-targetnamespace"/>",
                required = true)
    private String hostIPAddress;

    /** TCPIP port number on which the Host listens. */
    @XmlElement(name = "hostIPPort",
                namespace = "<xsl:value-of select="service-targetnamespace"/>",
                required = true)
    private int hostIPPort = 0;

    /** The Path to the HTTP server on the Host. */
    @XmlElement(name = "hostCICWPath",
                namespace = "<xsl:value-of select="service-targetnamespace"/>",
                required = true)
    private String hostCICWPath;

	/**
	 * Gets the Path to the HTTP server on the Host.
	 * @return the Path to the HTTP server
	 */
	public final String getHostCICWPath() {
		return hostCICWPath;
	}

	/**
	 * Sets the path to the HTTP server on the Host.
	 * @param path the path to set
	 */
	public final void setHostCICWPath(final String path) {
		this.hostCICWPath = path;
	}

	/**
	 * Gets the TCPIP address of the Host.
	 * @return the TCPIP address
	 */
	public final String getHostIPAddress() {
		return hostIPAddress;
	}

	/**
	 * Sets the TCPIP address of the Host.
	 * @param address the TCPIP address to set
	 */
	public final void setHostIPAddress(final String address) {
		this.hostIPAddress = address;
	}

	/**
	 * Gets the TCPIP port number on which the Host listens.
	 * @return the TCPIP address
	 */
	public final int getHostIPPort() {
		return hostIPPort;
	}

	/**
	 * Sets the TCPIP port number on which the Host listens.
	 * @param port the TCPIP port to set
	 */
	public final void setHostIPPort(final int port) {
		this.hostIPPort = port;
	}

	/** Gets the user ID used for host authentication/impersonation.
	 * @return host user ID
	 */
	public final String getHostUser() {
		return hostUser;
	}

	/**
	 * Sets the user ID used for host authentication/impersonation.
	 * @param user host user ID to set
	 */
	public final void setHostUser(final String user) {
		this.hostUser = user;
	}

	/** 
	 * Gets the password used for authentication.
	 * @return host user ID
	 */
	public final String getHostPassword() {
		return hostPassword;
	}

	/**
	 * Sets the password used for authentication.
	 * @param password host user ID to set
	 */
	public final void setHostPassword(final String password) {
		this.hostPassword = password;
	}

}

</xsl:template>

</xsl:stylesheet>
