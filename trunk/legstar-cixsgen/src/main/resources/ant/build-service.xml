<?xml version="1.0" encoding="UTF-8"?>
<!-- =================================================================================
     This script creates all artifacts needed for a JAXWS endpoint using
     COXB cobol binding to JAXB and CIXS connectivity.
     Prerequisite: COXB binding classes should have been generated
     using Coxbgen prior to using this script.
  -->
<project basedir=".." default="compileService" name="generate-service">

  <!-- ===========================================================  -->
  <!-- Setup environment
    -->
  <target name="init">

    <!-- Service name   -->
    <property name="service" value="lsfileae" />
    <!-- CICS program name   -->
    <property name="cics.program.name" value="LSFILEAE" />
    <!-- The input JAXB type name   -->
    <property name="jaxb.root.name.in" value="DfhcommareaType" />
    <!-- The output JAXB type name   -->
    <property name="jaxb.root.name.out" value="DfhcommareaType" />
    <!-- JAXB classes package name prefix    -->
    <property name="jaxb.package.pfx" value="legstar.test"/>
    <!-- CIXS classes package name prefix    -->
    <property name="cixs.package.pfx" value="legstar.test.ws"/>
    <!-- CIXS WSDL Namespace prefix    -->
    <property name="cixs.namespace.pfx" value="http://test.legstar/ws"/>

    <!-- CIXS Sources target location   -->
    <property name="cixs.src.dir" value="${basedir}/src/main/java"/>
    <!-- CIXS binaries target location  -->
    <property name="cixs.bin.dir" value="${basedir}/target/classes"/>
    <!-- Ant scripts target location   -->
    <property name="ant.dir" value="${basedir}/src/main/ant"/>
    <!-- Web descriptors target location   -->
    <property name="wdd.dir" value="${basedir}/src/main/WebContent/WEB-INF"/>
    <!-- Properties files target location   -->
    <property name="prop.dir" value="${basedir}/src/main/WebContent/WEB-INF/classes"/>

    <!-- Location of JAXB and binding classes   -->
    <property name="jaxb.bin.dir" value="${basedir}/target/classes"/>
    <!-- Location of custom code classes   -->
    <property name="cust.bin.dir" value="${basedir}/target/classes"/>
    
    <!-- War files target location   -->
    <property name="war.dir" value="${env.CATALINA_HOME}/webapps"/>
    
    <!-- Classpath setting -->
    <path id="classpath">
        <fileset dir="${basedir}" includes="lib/*.jar" />
        <!--JAXB and COXB binding classes  -->
        <dirset dir="${jaxb.bin.dir}"/>
    </path>

    <!-- Service Generator ant task -->
    <taskdef name="cixsgen"
      classname="com.legstar.cixs.gen.CixsServiceGenerator"
      classpathref="classpath" 
    /> 

  </target>

  <!-- ===========================================================  -->
  <!-- This step creates all the artifacts for a service.  -->
  
  <target name="generateService" depends="init">
    
    <!-- Make sure we have target source directories -->
    <mkdir dir="${cixs.src.dir}"/>
    <mkdir dir="${wdd.dir}"/>
    <mkdir dir="${ant.dir}"/>
    
    <cixsgen targetSrcDir="${cixs.src.dir}"
             targetWDDDir="${wdd.dir}"
             targetPropDir="${prop.dir}"
             targetAntDir="${ant.dir}"
             targetWarDir="${war.dir}"
             jaxbBinDir="${jaxb.bin.dir}"
             cixsBinDir="${cixs.bin.dir}"
             custBinDir="${cust.bin.dir}"
      >
        <!-- This sample is for a commarea-driven program. If your
             program is container-driven, you need to add the
             cicsChannel attribute to the cixsOperation element,
             specify as many input and output elements as necessary
             providing  a cicsContainer attribute for each. -->
        <cixsService name="${service}"
        endpointPackageName="${cixs.package.pfx}.${service}"
        targetNamespace="${cixs.namespace.pfx}/${service}">
		<cixsOperation name="${service}"
			cicsProgramName="${cics.program.name}">
			<input
				jaxbType="${jaxb.root.name.in}"
				jaxbPackageName="${jaxb.package.pfx}.${service}"
			/>
			<output
				jaxbType="${jaxb.root.name.out}"
				jaxbPackageName="${jaxb.package.pfx}.${service}"
			/>
		</cixsOperation>
      </cixsService>
    </cixsgen>
    
    </target>
   
  <!-- ===========================================================  -->
  <!-- Compile the generated service classes
    -->
  <target name="compileService" depends="generateService">
    <mkdir dir="${cixs.bin.dir}"/>
    <javac srcdir="${cixs.src.dir}"
           includes="**/*.java"
           destdir="${cixs.bin.dir}"
           classpathref="classpath"
           fork="yes"
    />
  </target>
  
</project>