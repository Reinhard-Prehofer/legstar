<?xml version="1.0" encoding="UTF-8"?>
<!-- =================================================================================
     This script creates all artifacts needed for a JAXWS endpoint using
     COXB cobol binding to JAXB and CIXS connectivity.
  -->
<project basedir="..\..\.." default="compileAllServices" name="generate-service">

	<!-- ===========================================================  -->
	<!-- Setup environment
	  -->
	<target name="init">

		<!-- Location of XML schemas  -->
	 	<property name="xsd.dir" value="${basedir}/../legstar-schemagen/src/test/schema" />
		<!-- Location of CIXS target source location   -->
		<property name="cixs.src.dir" value="${basedir}/src/test/java"/>
		<!-- Target location for generated CIXS binaries   -->
		<property name="cixs.bin.dir" value="${basedir}/target/test-classes"/>
		<!-- Location of JAXB and binding classes   -->
		<property name="jaxb.bin.dir" value="${basedir}/../legstar-coxbgen/target/test-classes"/>
		<!-- Location of custom code classes   -->
		<property name="cust.bin.dir" value="${basedir}/../legstar-coxbgen/target/test-classes"/>
		<!-- The input JAXB type name   -->
	 	<property name="jaxb.root.name.in" value="DfhcommareaType" />
		<!-- The output JAXB type name   -->
	 	<property name="jaxb.root.name.out" value="DfhcommareaType" />
		<!-- Location of Legstar binaries   -->
		<property name="build.dir" value="${basedir}/target"/>
		<!-- Location of ant target script location   -->
		<property name="ant.dir" value="${basedir}/src/test/gen-ant"/>
		<!-- Location of web descriptors target location   -->
		<property name="wdd.dir" value="${basedir}/src/test/WebContent/WEB-INF"/>
		<!-- Properties files target location   -->
		<property name="prop.dir" value="${basedir}/src/test/WebContent/WEB-INF/classes"/>
		<!-- War files target location   -->
		<property name="war.dir" value="C:/Program Files/Apache/apache-tomcat-5.5.17/webapps"/>
		<!-- Package name prefix for JAXB classes   -->
		<property name="jaxb.package.pfx" value="com.legstar.test.coxb"/>
		<!-- Package name prefix for CIXS classes   -->
		<property name="cixs.package.pfx" value="com.legstar.test.cixs"/>
		<!-- Namespace prefix for CIXS WSDL   -->
		<property name="cixs.namespace.pfx" value="http://cixs.test.legstar.com"/>
				
		<!-- Classpath setting -->
		<property name="maven.repo" value="C:\Documents and Settings\Fady\.m2\repository"/>
		<path id="classpath">
	  		<!-- JAXB-related Classpath  -->
		    <pathelement location="${maven.repo}\javax\activation\activation\1.1\activation-1.1.jar"/>
		    <pathelement location="${maven.repo}\javax\xml\bind\jaxb-api\2.1\jaxb-api-2.1.jar"/>
		    <pathelement location="${maven.repo}\javax\xml\bind\jsr173_api\1.0\jsr173_api-1.0.jar"/>
	  		<!--JAXWS binaries -->
		    <pathelement location="${maven.repo}\javax\jws\jsr181-api\1.0-MR1\jsr181-api-1.0-MR1.jar"/>
		    <pathelement location="${maven.repo}\javax\xml\ws\jaxws-api\2.1\jaxws-api-2.1.jar"/>
	  		<!--SAXON binaries -->
		    <pathelement location="${maven.repo}\net\sf\saxon\saxon\8.7\saxon-8.7.jar"/>
	  		<!--APACHE binaries -->
		    <pathelement location="${maven.repo}\commons-configuration\commons-configuration\1.3\commons-configuration-1.3.jar"/>
	  		<!-- CIXS runtime -->
		    <pathelement location="${maven.repo}\com\legsem\legstar\legstar-common\0.0.1\legstar-common-0.0.1.jar"/>
		    <pathelement location="${maven.repo}\com\legsem\legstar\legstar-coxbrt\0.0.1\legstar-coxbrt-0.0.1.jar"/>
		    <pathelement location="${maven.repo}\com\legsem\legstar\legstar-messaging\0.1-SNAPSHOT\legstar-messaging-0.1-SNAPSHOT.jar"/>
		    <pathelement location="${maven.repo}\com\legsem\legstar\legstar-invoker\0.1-SNAPSHOT\legstar-invoker-0.1-SNAPSHOT.jar"/>
	  		<!--CIXS Generator classes -->
	  		<pathelement location="${build.dir}/classes"/>
	  		<!--COXB generated classes -->
	  		<pathelement location="${jaxb.bin.dir}"/>
	  		<!--Custom classes -->
	  		<pathelement location="${cust.bin.dir}"/>
	  	</path>

		<!-- Service Generator ant task -->
		<taskdef name="cixsgen"
			classname="com.legstar.cixs.gen.CixsServiceGenerator"
			classpathref="classpath" 
		/> 

		<!-- Ant-Contrib tasks. Needed for "foreach ", regex, switch, ...
		     (ant-contrib.jar must be in ant classpath) -->
	    <taskdef resource="net/sf/antcontrib/antcontrib.properties">
	    	<classpath>
			    <pathelement location="C:\Program Files\Apache\antcontrib\ant-contrib-1.0b2-bin\ant-contrib\lib\ant-contrib.jar"/>
	    	</classpath>
	    </taskdef>
		
		<!-- Make sure we have target source directories -->
		<mkdir dir="${cixs.src.dir}"/>
		<mkdir dir="${cixs.bin.dir}"/>
 		
	</target>

	<!-- ===========================================================  -->
	<!-- Generate a service for each XML schema in a given folder
	     excluding those who need a choice strategy
	  -->
	<target name="generateAllServices" depends="init">
		<foreach target="generateService" param="xsd.file">
			<path>
				<fileset dir="${xsd.dir}" includes="*.xsd">
					<exclude name="clegtstc.cbl.xsd"/>
					<exclude name="lsfileal.xsd"/>
				</fileset>
			</path>
		</foreach>
		<antcall target="generateLsfilealService"/>
	</target>

	<!-- ===========================================================  -->
	<!-- This step creates all the artifacts for a service.
	     All parameters are derived from the XML schema file name  -->
	
	<target name="generateService" depends="init">
		<basename property="service" file="${xsd.file}" suffix="xsd"/>
		
		<mkdir dir="${wdd.dir}/${service}"/>
		<mkdir dir="${ant.dir}/${service}"/>
		
		<cixsgen targetSrcDir="${cixs.src.dir}"
		         targetWDDDir="${wdd.dir}/${service}"
			     targetPropDir="${prop.dir}"
			     targetAntDir="${ant.dir}/${service}"
		         targetWarDir="${war.dir}"
		         jaxbBinDir="${jaxb.bin.dir}"
		         cixsBinDir="${cixs.bin.dir}"
	             custBinDir="${cust.bin.dir}"
			>
			<service serviceName="${service}"
				endpointPackageName="${cixs.package.pfx}.${service}"
				targetNamespace="${cixs.namespace.pfx}/${service}">
				<operation operationName="${service}"
					programName="${service}"
					inputJaxbType="${jaxb.root.name.in}"
					inputJaxbPackageName="${jaxb.package.pfx}.${service}"
					outputJaxbType="${jaxb.root.name.out}"
					outputJaxbPackageName="${jaxb.package.pfx}.${service}"
				/>
			</service>
		</cixsgen>
		
  	</target>
	
	<!-- ===========================================================  -->
	<!-- This step creates a Web Service for Lsfileal which happens
	     to have a different input/output layout.   -->
	
	<target name="generateLsfilealService" depends="init">
		<property name="special-service" value="lsfileal"/>
		<property name="special-jaxb.root.name.in" value="RequestParmsType"/>
		<property name="special-jaxb.root.name.out" value="ReplyDataType"/>
		
		<mkdir dir="${wdd.dir}/${special-service}"/>
		<mkdir dir="${ant.dir}/${special-service}"/>
		
		<cixsgen targetSrcDir="${cixs.src.dir}"
		         targetWDDDir="${wdd.dir}/${special-service}"
			     targetPropDir="${prop.dir}"
			     targetAntDir="${ant.dir}/${special-service}"
		         targetWarDir="${war.dir}"
		         jaxbBinDir="${jaxb.bin.dir}"
		         cixsBinDir="${cixs.bin.dir}"
	             custBinDir="${cust.bin.dir}"
			>
			<service serviceName="${special-service}"
				endpointPackageName="${cixs.package.pfx}.${special-service}"
				targetNamespace="${cixs.namespace.pfx}/${special-service}">
				<operation operationName="${special-service}"
					programName="${special-service}"
					inputJaxbType="${special-jaxb.root.name.in}"
					inputJaxbPackageName="${jaxb.package.pfx}.${special-service}"
					outputJaxbType="${special-jaxb.root.name.out}"
					outputJaxbPackageName="${jaxb.package.pfx}.${special-service}"
				/>
			</service>
		</cixsgen>
		
  	</target>

	<!-- ===========================================================  -->
	<!-- Compiles the JAXB generated classes
	  -->
	<target name="compileAllServices" depends="generateAllServices,generateLsfilealService">
		 <javac srcdir="${cixs.src.dir}"
		 	     includes="**/*.java"
	 	         excludes="**/gen/**"
		         destdir="${cixs.bin.dir}"
		 	     classpathref="classpath"
		         fork="yes"
		 />
	</target>

	
</project>