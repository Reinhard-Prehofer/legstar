
package com.legstar.test.coxb.alltypes.bind;

import com.legstar.coxb.host.HostException;
import com.legstar.coxb.ICobolComplexBinding;

import com.legstar.coxb.ICobolBinding;

import com.legstar.coxb.CobolBindingFactory;
import com.legstar.coxb.ICobolBindingFactory;
import com.legstar.coxb.common.CComplexBinding;
import com.legstar.coxb.ICobolBinaryBinding;
import com.legstar.coxb.ICobolDoubleBinding;
import com.legstar.coxb.ICobolFloatBinding;
import com.legstar.coxb.ICobolOctetStreamBinding;
import com.legstar.coxb.ICobolStringBinding;
import com.legstar.coxb.ICobolPackedDecimalBinding;
import com.legstar.coxb.ICobolArrayBinaryBinding;
import com.legstar.coxb.ICobolArrayDoubleBinding;
import com.legstar.coxb.ICobolArrayFloatBinding;
import com.legstar.coxb.ICobolArrayStringBinding;
import com.legstar.coxb.ICobolArrayPackedDecimalBinding;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.List;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import com.legstar.test.coxb.alltypes.ObjectFactory;
import com.legstar.test.coxb.alltypes.DfhcommareaType;


/**
 * This class was generated by LegStar coxbgen version 1.1.
 * 2007-07-05T15:23:30.968+02:00
 * This class implements a bi-directional binding between a cobol structure and
 * a java object.
 */

public class DfhcommareaTypeBinding 
             extends CComplexBinding {

    /** Jaxb object to which this cobol complex element is bound. */
    private DfhcommareaType mJaxbObject;
  
    /** Indicates that the associated Jaxb object just came from the constructor
     * and doesn't need to be recreated. */
    private boolean mUnusedJaxbObject = false;
    
    /** Children of this complex binding. */
    
    /** Child bound to jaxb property SString(String). */
    public ICobolStringBinding sString;
    /** Child bound to jaxb property SBinary(byte[]). */
    public ICobolOctetStreamBinding sBinary;
    /** Child bound to jaxb property SShort(Short). */
    public ICobolBinaryBinding sShort;
    /** Child bound to jaxb property SUshort(Integer). */
    public ICobolBinaryBinding sUshort;
    /** Child bound to jaxb property SInt(Integer). */
    public ICobolBinaryBinding sInt;
    /** Child bound to jaxb property SUint(Long). */
    public ICobolBinaryBinding sUint;
    /** Child bound to jaxb property SLong(Long). */
    public ICobolPackedDecimalBinding sLong;
    /** Child bound to jaxb property SUlong(Long). */
    public ICobolPackedDecimalBinding sUlong;
    /** Child bound to jaxb property SXlong(BigInteger). */
    public ICobolPackedDecimalBinding sXlong;
    /** Child bound to jaxb property SUxlong(BigInteger). */
    public ICobolPackedDecimalBinding sUxlong;
    /** Child bound to jaxb property SDec(BigDecimal). */
    public ICobolPackedDecimalBinding sDec;
    /** Child bound to jaxb property SFloat(Float). */
    public ICobolFloatBinding sFloat;
    /** Child bound to jaxb property SDouble(Double). */
    public ICobolDoubleBinding sDouble;
    /** Child bound to jaxb property AString(String). */
    public ICobolArrayStringBinding aString;
    /** Child bound to jaxb property ABinary(String). */
    public ICobolArrayStringBinding aBinary;
    /** Child bound to jaxb property AShort(Short). */
    public ICobolArrayBinaryBinding aShort;
    /** Child bound to jaxb property AUshort(Integer). */
    public ICobolArrayBinaryBinding aUshort;
    /** Child bound to jaxb property AInt(Integer). */
    public ICobolArrayBinaryBinding aInt;
    /** Child bound to jaxb property AUint(Long). */
    public ICobolArrayBinaryBinding aUint;
    /** Child bound to jaxb property ALong(Long). */
    public ICobolArrayPackedDecimalBinding aLong;
    /** Child bound to jaxb property AUlong(Long). */
    public ICobolArrayPackedDecimalBinding aUlong;
    /** Child bound to jaxb property AXlong(BigInteger). */
    public ICobolArrayPackedDecimalBinding aXlong;
    /** Child bound to jaxb property AUxlong(BigInteger). */
    public ICobolArrayPackedDecimalBinding aUxlong;
    /** Child bound to jaxb property ADec(BigDecimal). */
    public ICobolArrayPackedDecimalBinding aDec;
    /** Child bound to jaxb property AFloat(Float). */
    public ICobolArrayFloatBinding aFloat;
    /** Child bound to jaxb property ADouble(Double). */
    public ICobolArrayDoubleBinding aDouble;
            
    /** Logger. */
    private static final Log LOG
        = LogFactory.getLog(DfhcommareaTypeBinding.class);
    
    /** Binding factory. */
    private static final ICobolBindingFactory BF
        = CobolBindingFactory.getBindingFactory();
    
    /** Static reference to Jaxb object factory to be used as default. */
    private static final ObjectFactory JF = new ObjectFactory();
    
    /** Current Jaxb object factory (Defaults to the static one but can be
     *  changed). */
    private ObjectFactory mJaxbObjectFactory = JF;
    
    /**
     * Constructor for a root Complex element without a bound JAXB object.
     */
    public DfhcommareaTypeBinding() {
        this(null);
    }

    /**
     * Constructor for a root Complex element with a bound JAXB object.
     * 
     * @param jaxbObject the concrete JAXB object instance bound to this
     *        complex element
     */
    public DfhcommareaTypeBinding(
            final DfhcommareaType jaxbObject) {
        this("", "", null, jaxbObject);
    }

     /**
     * Constructor for a Complex element as a child of another element and
     * an associated JAXB object.
     * 
     * @param name the identifier for this binding
     * @param jaxbName name of field in parent JAXB object
     * @param jaxbObject the concrete JAXB object instance bound to this
     *        complex element
     * @param parentBinding a reference to the parent binding
     */
    public DfhcommareaTypeBinding(
            final String name,
            final String jaxbName,
            final ICobolComplexBinding parentBinding,
            final DfhcommareaType jaxbObject) {
        
        super(name, jaxbName, DfhcommareaType.class, null, parentBinding);
        mJaxbObject = jaxbObject;
        if (mJaxbObject != null) {
            mUnusedJaxbObject = true;
        }
        initChildren();
    }

    /** Creates a binding property for each child. */
    private void initChildren() {
        if (LOG.isDebugEnabled()) {
            LOG.debug("Initializing started");
        }
        /* Create binding children instances */
        sString = BF.createStringBinding("SString", 
               "SString", String.class, this);
        sString.setByteLength(4);
        sString.setCobolName("S-STRING");
        sBinary = BF.createOctetStreamBinding("SBinary", 
               "SBinary", byte[].class, this);
        sBinary.setByteLength(4);
        sBinary.setCobolName("S-BINARY");
        sShort = BF.createBinaryBinding("SShort", 
               "SShort", Short.class, this);
        sShort.setByteLength(2);
        sShort.setCobolName("S-SHORT");
        sShort.setTotalDigits(4);
        sShort.setIsSigned(true);
        sUshort = BF.createBinaryBinding("SUshort", 
               "SUshort", Integer.class, this);
        sUshort.setByteLength(2);
        sUshort.setCobolName("S-USHORT");
        sUshort.setTotalDigits(4);
        sInt = BF.createBinaryBinding("SInt", 
               "SInt", Integer.class, this);
        sInt.setByteLength(4);
        sInt.setCobolName("S-INT");
        sInt.setTotalDigits(9);
        sInt.setIsSigned(true);
        sUint = BF.createBinaryBinding("SUint", 
               "SUint", Long.class, this);
        sUint.setByteLength(4);
        sUint.setCobolName("S-UINT");
        sUint.setTotalDigits(9);
        sLong = BF.createPackedDecimalBinding("SLong", 
               "SLong", Long.class, this);
        sLong.setByteLength(10);
        sLong.setCobolName("S-LONG");
        sLong.setTotalDigits(18);
        sLong.setIsSigned(true);
        sUlong = BF.createPackedDecimalBinding("SUlong", 
               "SUlong", Long.class, this);
        sUlong.setByteLength(10);
        sUlong.setCobolName("S-ULONG");
        sUlong.setTotalDigits(18);
        sXlong = BF.createPackedDecimalBinding("SXlong", 
               "SXlong", BigInteger.class, this);
        sXlong.setByteLength(16);
        sXlong.setCobolName("S-XLONG");
        sXlong.setTotalDigits(31);
        sXlong.setIsSigned(true);
        sUxlong = BF.createPackedDecimalBinding("SUxlong", 
               "SUxlong", BigInteger.class, this);
        sUxlong.setByteLength(16);
        sUxlong.setCobolName("S-UXLONG");
        sUxlong.setTotalDigits(31);
        sDec = BF.createPackedDecimalBinding("SDec", 
               "SDec", BigDecimal.class, this);
        sDec.setByteLength(5);
        sDec.setCobolName("S-DEC");
        sDec.setTotalDigits(9);
        sDec.setFractionDigits(2);
        sFloat = BF.createFloatBinding("SFloat", 
               "SFloat", Float.class, this);
        sFloat.setByteLength(4);
        sFloat.setCobolName("S-FLOAT");
        sDouble = BF.createDoubleBinding("SDouble", 
               "SDouble", Double.class, this);
        sDouble.setByteLength(8);
        sDouble.setCobolName("S-DOUBLE");
        aString = BF.createArrayStringBinding("AString", 
               "AString", String.class, this);
        aString.setByteLength(4);
        aString.setCobolName("A-STRING");
        aString.setMinOccurs(2);
        aString.setMaxOccurs(2);
        aBinary = BF.createArrayStringBinding("ABinary", 
               "ABinary", String.class, this);
        aBinary.setByteLength(4);
        aBinary.setCobolName("A-BINARY");
        aBinary.setMinOccurs(2);
        aBinary.setMaxOccurs(2);
        aShort = BF.createArrayBinaryBinding("AShort", 
               "AShort", Short.class, this);
        aShort.setByteLength(2);
        aShort.setCobolName("A-SHORT");
        aShort.setTotalDigits(4);
        aShort.setIsSigned(true);
        aShort.setMinOccurs(2);
        aShort.setMaxOccurs(2);
        aUshort = BF.createArrayBinaryBinding("AUshort", 
               "AUshort", Integer.class, this);
        aUshort.setByteLength(2);
        aUshort.setCobolName("A-USHORT");
        aUshort.setTotalDigits(4);
        aUshort.setMinOccurs(2);
        aUshort.setMaxOccurs(2);
        aInt = BF.createArrayBinaryBinding("AInt", 
               "AInt", Integer.class, this);
        aInt.setByteLength(4);
        aInt.setCobolName("A-INT");
        aInt.setTotalDigits(9);
        aInt.setIsSigned(true);
        aInt.setMinOccurs(2);
        aInt.setMaxOccurs(2);
        aUint = BF.createArrayBinaryBinding("AUint", 
               "AUint", Long.class, this);
        aUint.setByteLength(4);
        aUint.setCobolName("A-UINT");
        aUint.setTotalDigits(9);
        aUint.setMinOccurs(2);
        aUint.setMaxOccurs(2);
        aLong = BF.createArrayPackedDecimalBinding("ALong", 
               "ALong", Long.class, this);
        aLong.setByteLength(10);
        aLong.setCobolName("A-LONG");
        aLong.setTotalDigits(18);
        aLong.setIsSigned(true);
        aLong.setMinOccurs(2);
        aLong.setMaxOccurs(2);
        aUlong = BF.createArrayPackedDecimalBinding("AUlong", 
               "AUlong", Long.class, this);
        aUlong.setByteLength(10);
        aUlong.setCobolName("A-ULONG");
        aUlong.setTotalDigits(18);
        aUlong.setMinOccurs(2);
        aUlong.setMaxOccurs(2);
        aXlong = BF.createArrayPackedDecimalBinding("AXlong", 
               "AXlong", BigInteger.class, this);
        aXlong.setByteLength(16);
        aXlong.setCobolName("A-XLONG");
        aXlong.setTotalDigits(31);
        aXlong.setIsSigned(true);
        aXlong.setMinOccurs(2);
        aXlong.setMaxOccurs(2);
        aUxlong = BF.createArrayPackedDecimalBinding("AUxlong", 
               "AUxlong", BigInteger.class, this);
        aUxlong.setByteLength(16);
        aUxlong.setCobolName("A-UXLONG");
        aUxlong.setTotalDigits(31);
        aUxlong.setMinOccurs(2);
        aUxlong.setMaxOccurs(2);
        aDec = BF.createArrayPackedDecimalBinding("ADec", 
               "ADec", BigDecimal.class, this);
        aDec.setByteLength(5);
        aDec.setCobolName("A-DEC");
        aDec.setTotalDigits(9);
        aDec.setFractionDigits(2);
        aDec.setMinOccurs(2);
        aDec.setMaxOccurs(2);
        aFloat = BF.createArrayFloatBinding("AFloat", 
               "AFloat", Float.class, this);
        aFloat.setByteLength(4);
        aFloat.setCobolName("A-FLOAT");
        aFloat.setMinOccurs(2);
        aFloat.setMaxOccurs(2);
        aDouble = BF.createArrayDoubleBinding("ADouble", 
               "ADouble", Double.class, this);
        aDouble.setByteLength(8);
        aDouble.setCobolName("A-DOUBLE");
        aDouble.setMinOccurs(2);
        aDouble.setMaxOccurs(2);
        
        /* Add children to children list */
        getChildrenList().add(sString);
        getChildrenList().add(sBinary);
        getChildrenList().add(sShort);
        getChildrenList().add(sUshort);
        getChildrenList().add(sInt);
        getChildrenList().add(sUint);
        getChildrenList().add(sLong);
        getChildrenList().add(sUlong);
        getChildrenList().add(sXlong);
        getChildrenList().add(sUxlong);
        getChildrenList().add(sDec);
        getChildrenList().add(sFloat);
        getChildrenList().add(sDouble);
        getChildrenList().add(aString);
        getChildrenList().add(aBinary);
        getChildrenList().add(aShort);
        getChildrenList().add(aUshort);
        getChildrenList().add(aInt);
        getChildrenList().add(aUint);
        getChildrenList().add(aLong);
        getChildrenList().add(aUlong);
        getChildrenList().add(aXlong);
        getChildrenList().add(aUxlong);
        getChildrenList().add(aDec);
        getChildrenList().add(aFloat);
        getChildrenList().add(aDouble);

        if (LOG.isDebugEnabled()) {
            LOG.debug("Initializing successful");
        }
    }

    /** {@inheritDoc} */
    public final void createJaxbObject() throws HostException {
        /* Since this complex binding has a constructor that takes a
         * JAXB object, we might already have a Jaxb object that
         * was not used yet. */
        if (mUnusedJaxbObject && mJaxbObject != null) {
            mUnusedJaxbObject = false;
            return;
        }
        mJaxbObject = mJaxbObjectFactory.createDfhcommareaType();
    }

    /** {@inheritDoc} */
    public final void setChildrenValues() throws HostException {

         /* Make sure there is an associated JAXB object*/
        if (mJaxbObject == null) {
            createJaxbObject();
        }
        
        /* Get JAXB property SString */
        if (LOG.isDebugEnabled()) {
            LOG.debug("Getting value from JAXB property "
                    + "SString"
                    + " value=" + mJaxbObject.getSString());
        }
        sString.setObjectValue(mJaxbObject.getSString());
        
        /* Get JAXB property SBinary */
        if (LOG.isDebugEnabled()) {
            LOG.debug("Getting value from JAXB property "
                    + "SBinary"
                    + " value=" + mJaxbObject.getSBinary());
        }
        sBinary.setObjectValue(mJaxbObject.getSBinary());
        
        /* Get JAXB property SShort */
        if (LOG.isDebugEnabled()) {
            LOG.debug("Getting value from JAXB property "
                    + "SShort"
                    + " value=" + mJaxbObject.getSShort());
        }
        sShort.setObjectValue(mJaxbObject.getSShort());
        
        /* Get JAXB property SUshort */
        if (LOG.isDebugEnabled()) {
            LOG.debug("Getting value from JAXB property "
                    + "SUshort"
                    + " value=" + mJaxbObject.getSUshort());
        }
        sUshort.setObjectValue(mJaxbObject.getSUshort());
        
        /* Get JAXB property SInt */
        if (LOG.isDebugEnabled()) {
            LOG.debug("Getting value from JAXB property "
                    + "SInt"
                    + " value=" + mJaxbObject.getSInt());
        }
        sInt.setObjectValue(mJaxbObject.getSInt());
        
        /* Get JAXB property SUint */
        if (LOG.isDebugEnabled()) {
            LOG.debug("Getting value from JAXB property "
                    + "SUint"
                    + " value=" + mJaxbObject.getSUint());
        }
        sUint.setObjectValue(mJaxbObject.getSUint());
        
        /* Get JAXB property SLong */
        if (LOG.isDebugEnabled()) {
            LOG.debug("Getting value from JAXB property "
                    + "SLong"
                    + " value=" + mJaxbObject.getSLong());
        }
        sLong.setObjectValue(mJaxbObject.getSLong());
        
        /* Get JAXB property SUlong */
        if (LOG.isDebugEnabled()) {
            LOG.debug("Getting value from JAXB property "
                    + "SUlong"
                    + " value=" + mJaxbObject.getSUlong());
        }
        sUlong.setObjectValue(mJaxbObject.getSUlong());
        
        /* Get JAXB property SXlong */
        if (LOG.isDebugEnabled()) {
            LOG.debug("Getting value from JAXB property "
                    + "SXlong"
                    + " value=" + mJaxbObject.getSXlong());
        }
        sXlong.setObjectValue(mJaxbObject.getSXlong());
        
        /* Get JAXB property SUxlong */
        if (LOG.isDebugEnabled()) {
            LOG.debug("Getting value from JAXB property "
                    + "SUxlong"
                    + " value=" + mJaxbObject.getSUxlong());
        }
        sUxlong.setObjectValue(mJaxbObject.getSUxlong());
        
        /* Get JAXB property SDec */
        if (LOG.isDebugEnabled()) {
            LOG.debug("Getting value from JAXB property "
                    + "SDec"
                    + " value=" + mJaxbObject.getSDec());
        }
        sDec.setObjectValue(mJaxbObject.getSDec());
        
        /* Get JAXB property SFloat */
        if (LOG.isDebugEnabled()) {
            LOG.debug("Getting value from JAXB property "
                    + "SFloat"
                    + " value=" + mJaxbObject.getSFloat());
        }
        sFloat.setObjectValue(mJaxbObject.getSFloat());
        
        /* Get JAXB property SDouble */
        if (LOG.isDebugEnabled()) {
            LOG.debug("Getting value from JAXB property "
                    + "SDouble"
                    + " value=" + mJaxbObject.getSDouble());
        }
        sDouble.setObjectValue(mJaxbObject.getSDouble());
        
        /* Get JAXB property AString */
        if (LOG.isDebugEnabled()) {
            LOG.debug("Getting value from JAXB property "
                    + "AString"
                    + " value=" + mJaxbObject.getAString());
        }
        aString.setObjectValue(mJaxbObject.getAString());
        
        /* Get JAXB property ABinary */
        if (LOG.isDebugEnabled()) {
            LOG.debug("Getting value from JAXB property "
                    + "ABinary"
                    + " value=" + mJaxbObject.getABinary());
        }
        aBinary.setObjectValue(mJaxbObject.getABinary());
        
        /* Get JAXB property AShort */
        if (LOG.isDebugEnabled()) {
            LOG.debug("Getting value from JAXB property "
                    + "AShort"
                    + " value=" + mJaxbObject.getAShort());
        }
        aShort.setObjectValue(mJaxbObject.getAShort());
        
        /* Get JAXB property AUshort */
        if (LOG.isDebugEnabled()) {
            LOG.debug("Getting value from JAXB property "
                    + "AUshort"
                    + " value=" + mJaxbObject.getAUshort());
        }
        aUshort.setObjectValue(mJaxbObject.getAUshort());
        
        /* Get JAXB property AInt */
        if (LOG.isDebugEnabled()) {
            LOG.debug("Getting value from JAXB property "
                    + "AInt"
                    + " value=" + mJaxbObject.getAInt());
        }
        aInt.setObjectValue(mJaxbObject.getAInt());
        
        /* Get JAXB property AUint */
        if (LOG.isDebugEnabled()) {
            LOG.debug("Getting value from JAXB property "
                    + "AUint"
                    + " value=" + mJaxbObject.getAUint());
        }
        aUint.setObjectValue(mJaxbObject.getAUint());
        
        /* Get JAXB property ALong */
        if (LOG.isDebugEnabled()) {
            LOG.debug("Getting value from JAXB property "
                    + "ALong"
                    + " value=" + mJaxbObject.getALong());
        }
        aLong.setObjectValue(mJaxbObject.getALong());
        
        /* Get JAXB property AUlong */
        if (LOG.isDebugEnabled()) {
            LOG.debug("Getting value from JAXB property "
                    + "AUlong"
                    + " value=" + mJaxbObject.getAUlong());
        }
        aUlong.setObjectValue(mJaxbObject.getAUlong());
        
        /* Get JAXB property AXlong */
        if (LOG.isDebugEnabled()) {
            LOG.debug("Getting value from JAXB property "
                    + "AXlong"
                    + " value=" + mJaxbObject.getAXlong());
        }
        aXlong.setObjectValue(mJaxbObject.getAXlong());
        
        /* Get JAXB property AUxlong */
        if (LOG.isDebugEnabled()) {
            LOG.debug("Getting value from JAXB property "
                    + "AUxlong"
                    + " value=" + mJaxbObject.getAUxlong());
        }
        aUxlong.setObjectValue(mJaxbObject.getAUxlong());
        
        /* Get JAXB property ADec */
        if (LOG.isDebugEnabled()) {
            LOG.debug("Getting value from JAXB property "
                    + "ADec"
                    + " value=" + mJaxbObject.getADec());
        }
        aDec.setObjectValue(mJaxbObject.getADec());
        
        /* Get JAXB property AFloat */
        if (LOG.isDebugEnabled()) {
            LOG.debug("Getting value from JAXB property "
                    + "AFloat"
                    + " value=" + mJaxbObject.getAFloat());
        }
        aFloat.setObjectValue(mJaxbObject.getAFloat());
        
        /* Get JAXB property ADouble */
        if (LOG.isDebugEnabled()) {
            LOG.debug("Getting value from JAXB property "
                    + "ADouble"
                    + " value=" + mJaxbObject.getADouble());
        }
        aDouble.setObjectValue(mJaxbObject.getADouble());
        
    }

    /** {@inheritDoc} */
    @SuppressWarnings("unchecked")
    public final void setJaxbPropertyValue(final int index) throws HostException {
 
        ICobolBinding child = getChildrenList().get(index);
        
    	/* Children that are not bound to a jaxb property are ignored.
    	 * This includes Choices and dynamically generated counbters
    	 * for instance.  */
        if (!child.isBound()) {
            return;
        }
        
        Object value = child.getObjectValue(child.getJaxbType());
        if (LOG.isDebugEnabled()) {
            LOG.debug("Setting value of JAXB property "
                    + child.getJaxbName()
                    + " value=" + value);
        }
        /* Set the JAXB object property value from binding object */
        switch (index) {
        case 0:
            mJaxbObject.setSString((String) value);
            break;
        case 1:
            mJaxbObject.setSBinary((byte[]) value);
            break;
        case 2:
            mJaxbObject.setSShort((Short) value);
            break;
        case 3:
            mJaxbObject.setSUshort((Integer) value);
            break;
        case 4:
            mJaxbObject.setSInt((Integer) value);
            break;
        case 5:
            mJaxbObject.setSUint((Long) value);
            break;
        case 6:
            mJaxbObject.setSLong((Long) value);
            break;
        case 7:
            mJaxbObject.setSUlong((Long) value);
            break;
        case 8:
            mJaxbObject.setSXlong((BigInteger) value);
            break;
        case 9:
            mJaxbObject.setSUxlong((BigInteger) value);
            break;
        case 10:
            mJaxbObject.setSDec((BigDecimal) value);
            break;
        case 11:
            mJaxbObject.setSFloat((Float) value);
            break;
        case 12:
            mJaxbObject.setSDouble((Double) value);
            break;
        case 13:
            mJaxbObject.getAString().clear();
            mJaxbObject.getAString().addAll(
                (List < String >) value);
            break;
        case 14:
            mJaxbObject.getABinary().clear();
            mJaxbObject.getABinary().addAll(
                (List < String >) value);
            break;
        case 15:
            mJaxbObject.getAShort().clear();
            mJaxbObject.getAShort().addAll(
                (List < Short >) value);
            break;
        case 16:
            mJaxbObject.getAUshort().clear();
            mJaxbObject.getAUshort().addAll(
                (List < Integer >) value);
            break;
        case 17:
            mJaxbObject.getAInt().clear();
            mJaxbObject.getAInt().addAll(
                (List < Integer >) value);
            break;
        case 18:
            mJaxbObject.getAUint().clear();
            mJaxbObject.getAUint().addAll(
                (List < Long >) value);
            break;
        case 19:
            mJaxbObject.getALong().clear();
            mJaxbObject.getALong().addAll(
                (List < Long >) value);
            break;
        case 20:
            mJaxbObject.getAUlong().clear();
            mJaxbObject.getAUlong().addAll(
                (List < Long >) value);
            break;
        case 21:
            mJaxbObject.getAXlong().clear();
            mJaxbObject.getAXlong().addAll(
                (List < BigInteger >) value);
            break;
        case 22:
            mJaxbObject.getAUxlong().clear();
            mJaxbObject.getAUxlong().addAll(
                (List < BigInteger >) value);
            break;
        case 23:
            mJaxbObject.getADec().clear();
            mJaxbObject.getADec().addAll(
                (List < BigDecimal >) value);
            break;
        case 24:
            mJaxbObject.getAFloat().clear();
            mJaxbObject.getAFloat().addAll(
                (List < Float >) value);
            break;
        case 25:
            mJaxbObject.getADouble().clear();
            mJaxbObject.getADouble().addAll(
                (List < Double >) value);
            break;
        default:
            break;
        }
    }
            
    /** {@inheritDoc} */
    public final Object getObjectValue(final Class type) throws HostException {
        if (type.equals(DfhcommareaType.class)) {
            return mJaxbObject;
        } else {
            throw new HostException("Attempt to get binding " + getBindingName()
                    + " as an incompatible type " + type);
        }
    }

    /** {@inheritDoc} */
    public final void setObjectValue(final Object value) throws HostException {
        if (value == null) {
            mJaxbObject = null;
            return;
        }
        if (value.getClass().equals(DfhcommareaType.class)) {
            mJaxbObject = (DfhcommareaType) value;
        } else {
            throw new HostException("Attempt to set binding " + getBindingName()
                    + " from an incompatible value " + value);
        }
    }

    /**
     * @return the java object factory for objects creation
     */
    public final ObjectFactory getObjectFactory() {
        return mJaxbObjectFactory;
    }

    /**
     * @param jaxbObjectFactory the java object factory for objects creation 
     */
    public final void setObjectFactory(final Object jaxbObjectFactory) {
        mJaxbObjectFactory = (ObjectFactory) jaxbObjectFactory;
    }

    /** {@inheritDoc} */
    public final boolean isSet() {
        return (mJaxbObject != null);
    }

    /**
     * @return the bound JAXB object
     */
    public final DfhcommareaType getDfhcommareaType() {
        return mJaxbObject;
    }
    
}
