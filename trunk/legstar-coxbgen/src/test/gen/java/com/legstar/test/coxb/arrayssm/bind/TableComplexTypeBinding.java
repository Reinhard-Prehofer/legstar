
package com.legstar.test.coxb.arrayssm.bind;

import com.legstar.coxb.host.HostException;
import com.legstar.coxb.ICobolComplexBinding;

import com.legstar.coxb.ICobolBinding;

import com.legstar.coxb.CobolBindingFactory;
import com.legstar.coxb.ICobolBindingFactory;
import com.legstar.coxb.common.CComplexBinding;
import com.legstar.coxb.ICobolStringBinding;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import com.legstar.test.coxb.arrayssm.ObjectFactory;
import com.legstar.test.coxb.arrayssm.TableComplexType;


/**
 * This class was generated by LegStar coxbgen version 1.1.
 * 2007-07-05T15:23:31.484+02:00
 * This class implements a bi-directional binding between a cobol structure and
 * a java object.
 */

public class TableComplexTypeBinding 
             extends CComplexBinding {

    /** Jaxb object to which this cobol complex element is bound. */
    private TableComplexType mJaxbObject;
  
    /** Indicates that the associated Jaxb object just came from the constructor
     * and doesn't need to be recreated. */
    private boolean mUnusedJaxbObject = false;
    
    /** Children of this complex binding. */
    
    /** Child bound to jaxb property ElementComplex(String). */
    public ICobolStringBinding elementComplex;
            
    /** Logger. */
    private static final Log LOG
        = LogFactory.getLog(TableComplexTypeBinding.class);
    
    /** Binding factory. */
    private static final ICobolBindingFactory BF
        = CobolBindingFactory.getBindingFactory();
    
    /** Static reference to Jaxb object factory to be used as default. */
    private static final ObjectFactory JF = new ObjectFactory();
    
    /** Current Jaxb object factory (Defaults to the static one but can be
     *  changed). */
    private ObjectFactory mJaxbObjectFactory = JF;
    
    /**
     * Constructor for a root Complex element without a bound JAXB object.
     */
    public TableComplexTypeBinding() {
        this(null);
    }

    /**
     * Constructor for a root Complex element with a bound JAXB object.
     * 
     * @param jaxbObject the concrete JAXB object instance bound to this
     *        complex element
     */
    public TableComplexTypeBinding(
            final TableComplexType jaxbObject) {
        this("", "", null, jaxbObject);
    }

     /**
     * Constructor for a Complex element as a child of another element and
     * an associated JAXB object.
     * 
     * @param name the identifier for this binding
     * @param jaxbName name of field in parent JAXB object
     * @param jaxbObject the concrete JAXB object instance bound to this
     *        complex element
     * @param parentBinding a reference to the parent binding
     */
    public TableComplexTypeBinding(
            final String name,
            final String jaxbName,
            final ICobolComplexBinding parentBinding,
            final TableComplexType jaxbObject) {
        
        super(name, jaxbName, TableComplexType.class, null, parentBinding);
        mJaxbObject = jaxbObject;
        if (mJaxbObject != null) {
            mUnusedJaxbObject = true;
        }
        initChildren();
    }

    /** Creates a binding property for each child. */
    private void initChildren() {
        if (LOG.isDebugEnabled()) {
            LOG.debug("Initializing started");
        }
        /* Create binding children instances */
        elementComplex = BF.createStringBinding("ElementComplex", 
               "ElementComplex", String.class, this);
        elementComplex.setByteLength(5);
        elementComplex.setCobolName("ELEMENT-COMPLEX");
        
        /* Add children to children list */
        getChildrenList().add(elementComplex);

        if (LOG.isDebugEnabled()) {
            LOG.debug("Initializing successful");
        }
    }

    /** {@inheritDoc} */
    public final void createJaxbObject() throws HostException {
        /* Since this complex binding has a constructor that takes a
         * JAXB object, we might already have a Jaxb object that
         * was not used yet. */
        if (mUnusedJaxbObject && mJaxbObject != null) {
            mUnusedJaxbObject = false;
            return;
        }
        mJaxbObject = mJaxbObjectFactory.createTableComplexType();
    }

    /** {@inheritDoc} */
    public final void setChildrenValues() throws HostException {

         /* Make sure there is an associated JAXB object*/
        if (mJaxbObject == null) {
            createJaxbObject();
        }
        
        /* Get JAXB property ElementComplex */
        if (LOG.isDebugEnabled()) {
            LOG.debug("Getting value from JAXB property "
                    + "ElementComplex"
                    + " value=" + mJaxbObject.getElementComplex());
        }
        elementComplex.setObjectValue(mJaxbObject.getElementComplex());
        
    }

    /** {@inheritDoc} */
    @SuppressWarnings("unchecked")
    public final void setJaxbPropertyValue(final int index) throws HostException {
 
        ICobolBinding child = getChildrenList().get(index);
        
    	/* Children that are not bound to a jaxb property are ignored.
    	 * This includes Choices and dynamically generated counbters
    	 * for instance.  */
        if (!child.isBound()) {
            return;
        }
        
        Object value = child.getObjectValue(child.getJaxbType());
        if (LOG.isDebugEnabled()) {
            LOG.debug("Setting value of JAXB property "
                    + child.getJaxbName()
                    + " value=" + value);
        }
        /* Set the JAXB object property value from binding object */
        switch (index) {
        case 0:
            mJaxbObject.setElementComplex((String) value);
            break;
        default:
            break;
        }
    }
            
    /** {@inheritDoc} */
    public final Object getObjectValue(final Class type) throws HostException {
        if (type.equals(TableComplexType.class)) {
            return mJaxbObject;
        } else {
            throw new HostException("Attempt to get binding " + getBindingName()
                    + " as an incompatible type " + type);
        }
    }

    /** {@inheritDoc} */
    public final void setObjectValue(final Object value) throws HostException {
        if (value == null) {
            mJaxbObject = null;
            return;
        }
        if (value.getClass().equals(TableComplexType.class)) {
            mJaxbObject = (TableComplexType) value;
        } else {
            throw new HostException("Attempt to set binding " + getBindingName()
                    + " from an incompatible value " + value);
        }
    }

    /**
     * @return the java object factory for objects creation
     */
    public final ObjectFactory getObjectFactory() {
        return mJaxbObjectFactory;
    }

    /**
     * @param jaxbObjectFactory the java object factory for objects creation 
     */
    public final void setObjectFactory(final Object jaxbObjectFactory) {
        mJaxbObjectFactory = (ObjectFactory) jaxbObjectFactory;
    }

    /** {@inheritDoc} */
    public final boolean isSet() {
        return (mJaxbObject != null);
    }

    /**
     * @return the bound JAXB object
     */
    public final TableComplexType getTableComplexType() {
        return mJaxbObject;
    }
    
}
