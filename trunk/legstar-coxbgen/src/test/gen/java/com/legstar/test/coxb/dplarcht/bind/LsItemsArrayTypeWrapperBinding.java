
package com.legstar.test.coxb.dplarcht.bind;

import com.legstar.coxb.host.HostException;
import com.legstar.coxb.ICobolComplexBinding;

import com.legstar.coxb.common.CArrayComplexBinding;
import java.util.List;
import java.util.ArrayList;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import com.legstar.test.coxb.dplarcht.LsItemsArrayType;
    

/**
 * This class was generated by LegStar coxbgen version 1.1.
 * 2007-07-05T15:23:31.296+02:00
 * Represents an array of complex (record) elements. A complex array maps to
 * a cobol OCCURS of group items and to java Lists.
 */

public class LsItemsArrayTypeWrapperBinding 
             extends CArrayComplexBinding {

    /** Java object to which this cobol complex array element is bound. */
    private List < LsItemsArrayType > mJaxbObject;
    
    /** Logger. */
    private static final Log LOG
        = LogFactory.getLog(LsItemsArrayTypeWrapperBinding.class);

    /**
     * Constructor for an array of Complex elements.
     * 
     * @param name the identifier for this binding
     * @param jaxbName name of field in parent JAXB object
     * @param parentBinding a reference to the parent binding
     * @param complexItemBinding a binding element for array items
     */
    public LsItemsArrayTypeWrapperBinding(
            final String name,
            final String jaxbName,
            final ICobolComplexBinding parentBinding,
            final ICobolComplexBinding complexItemBinding) {
        
        super(name, jaxbName, LsItemsArrayType.class, null, parentBinding, complexItemBinding);
        setMinOccurs(1);
        setMaxOccurs(500);
        setDependingOn("LS-ITEMS-COUNT");
        
    }

    /** {@inheritDoc} */
    public final void createJaxbObject() throws HostException {
        mJaxbObject = new ArrayList < LsItemsArrayType >();
    }

    /** {@inheritDoc} */
    public final void setItemValue(
        final int index) throws HostException {
         /* Make sure there is an associated JAXB object*/
        if (mJaxbObject == null) {
            createJaxbObject();
        }
        /* The Jaxb list might have less items than expected by the binding.
         * In this case, we fill the binding with empty items. */
        if (index < mJaxbObject.size()) {
            if (LOG.isDebugEnabled()) {
                LOG.debug("Getting value from item " +  index
                        + " of JAXB property "
                        + "List < LsItemsArrayType >"
                        + " value=" + mJaxbObject.get(index));
            }
            getComplexItemBinding().setObjectValue(mJaxbObject.get(index));
        } else {
            if (LOG.isDebugEnabled()) {
                LOG.debug("Initializing item " +  index);
            }
            getComplexItemBinding().setObjectValue(null);
        }
    }

    /** {@inheritDoc} */
    @SuppressWarnings("unchecked")
    public final void addJaxbPropertyValue(
        final int index) throws HostException {
         /* Make sure there is an associated JAXB object*/
        if (mJaxbObject == null) {
            throw new HostException(
                    "Binded object not initialized for " + getBindingName());
        }
        mJaxbObject.add((LsItemsArrayType) getComplexItemBinding().
        		getObjectValue(LsItemsArrayType.class));
    }
 
    /** {@inheritDoc} */
    public final List getObjectList() {
        return mJaxbObject;
    }

    /** {@inheritDoc} */
    @SuppressWarnings("unchecked")
    public final void setObjectList(
            final List list) {
        mJaxbObject = list;
    }
    
    /** {@inheritDoc} */
    public final Object getObjectValue(final Class type) throws HostException {
        if (type.equals(LsItemsArrayType.class)) {
            return mJaxbObject;
        } else {
            throw new HostException("Attempt to get binding " + getBindingName()
                    + " as an incompatible type " + type);
        }
    }

    /** {@inheritDoc} */
     @SuppressWarnings("unchecked")
    public final void setObjectValue(final Object value) throws HostException {
        if (value == null) {
            mJaxbObject = null;
            return;
        }
        if (value instanceof List) {
            if (((List) value).size() == 0) {
                mJaxbObject = new ArrayList < LsItemsArrayType >();
                return;
            }
            /* We assume all items will have the same type as the first one.
             * The unchecked cast might break at runtime. */
            Object item = ((List) value).get(0);
            if (item.getClass().equals(LsItemsArrayType.class)) {
                mJaxbObject = (List < LsItemsArrayType >) value;
                return;
            }
        }
        throw new HostException("Attempt to set binding " + getBindingName()
                + " from an incompatible value " + value);
    }

    /** {@inheritDoc} */
    public final boolean isSet() {
        return (mJaxbObject != null);
    }

    /**
     * @return the bound JAXB object
     * @throws HostException if bound JAXB object cannot be retrieved
     */
    @SuppressWarnings("unchecked")
    public final List < LsItemsArrayType > getLsItemsArrayType() throws HostException {
        return (List < LsItemsArrayType >) getObjectValue(LsItemsArrayType.class);
    }
    
}
