/*******************************************************************************
 * LegStar legacy Web-enablement .
 * Copyright (C)  2007 LegSem
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 * 02110-1301  USA
 * 
 *     
 *****************************************************************************/

package com.legstar.test.coxb.alltypes.bind;

import com.legstar.host.HostException;
import com.legstar.coxb.ICobolBinding;
import com.legstar.coxb.rt.CComplexBinding;

import com.legstar.coxb.rt.CBinaryBinding;
import com.legstar.coxb.rt.CDoubleBinding;
import com.legstar.coxb.rt.CFloatBinding;
import com.legstar.coxb.rt.COctetStreamBinding;
import com.legstar.coxb.rt.CStringBinding;
import com.legstar.coxb.rt.CPackedDecimalBinding;
import com.legstar.coxb.rt.CArrayBinaryBinding;
import com.legstar.coxb.rt.CArrayDoubleBinding;
import com.legstar.coxb.rt.CArrayFloatBinding;
import com.legstar.coxb.rt.CArrayStringBinding;
import com.legstar.coxb.rt.CArrayPackedDecimalBinding;
import java.math.BigDecimal;
import java.math.BigInteger;

import com.legstar.test.coxb.alltypes.DfhcommareaType;
import com.legstar.test.coxb.alltypes.ObjectFactory;

/**
 * This class was generated by COXB version 1.0.
 * 2007-01-26T18:17:16.5+01:00
 * This class implements a bi-directional binding between a cobol structure and
 * a java object. Visitors can use this class to visit each element of the
 * structure in turn. No reflection or annotations are used which makes this
 * class suitable for heavy loads.
 */

public class DfhcommareaTypeBinding 
             extends CComplexBinding
             implements ICobolBinding {
  
    /** Name of java property to which this cobol element is bound. */
    private static final String JAVA_NAME = "DfhcommareaType";
  
    /** Type of java property to which this cobol element is bound. */
    private static final String JAVA_TYPE = "DfhcommareaType";
    
    /** Child property CStringBinding of simple type. */
    public CStringBinding sString;
            
    /** Child property COctetStreamBinding of simple type. */
    public COctetStreamBinding sBinary;
            
    /** Child property CBinaryBinding of simple type. */
    public CBinaryBinding sShort;
            
    /** Child property CBinaryBinding of simple type. */
    public CBinaryBinding sUshort;
            
    /** Child property CBinaryBinding of simple type. */
    public CBinaryBinding sInt;
            
    /** Child property CBinaryBinding of simple type. */
    public CBinaryBinding sUint;
            
    /** Child property CPackedDecimalBinding of simple type. */
    public CPackedDecimalBinding sLong;
            
    /** Child property CPackedDecimalBinding of simple type. */
    public CPackedDecimalBinding sUlong;
            
    /** Child property CPackedDecimalBinding of simple type. */
    public CPackedDecimalBinding sXlong;
            
    /** Child property CPackedDecimalBinding of simple type. */
    public CPackedDecimalBinding sUxlong;
            
    /** Child property CPackedDecimalBinding of simple type. */
    public CPackedDecimalBinding sDec;
            
    /** Child property CFloatBinding of simple type. */
    public CFloatBinding sFloat;
            
    /** Child property CDoubleBinding of simple type. */
    public CDoubleBinding sDouble;
            
    /** Child property CArrayStringBinding of simple type. */
    public CArrayStringBinding aString;
            
    /** Child property CArrayStringBinding of simple type. */
    public CArrayStringBinding aBinary;
            
    /** Child property CArrayBinaryBinding of simple type. */
    public CArrayBinaryBinding aShort;
            
    /** Child property CArrayBinaryBinding of simple type. */
    public CArrayBinaryBinding aUshort;
            
    /** Child property CArrayBinaryBinding of simple type. */
    public CArrayBinaryBinding aInt;
            
    /** Child property CArrayBinaryBinding of simple type. */
    public CArrayBinaryBinding aUint;
            
    /** Child property CArrayPackedDecimalBinding of simple type. */
    public CArrayPackedDecimalBinding aLong;
            
    /** Child property CArrayPackedDecimalBinding of simple type. */
    public CArrayPackedDecimalBinding aUlong;
            
    /** Child property CArrayPackedDecimalBinding of simple type. */
    public CArrayPackedDecimalBinding aXlong;
            
    /** Child property CArrayPackedDecimalBinding of simple type. */
    public CArrayPackedDecimalBinding aUxlong;
            
    /** Child property CArrayPackedDecimalBinding of simple type. */
    public CArrayPackedDecimalBinding aDec;
            
    /** Child property CArrayFloatBinding of simple type. */
    public CArrayFloatBinding aFloat;
            
    /** Child property CArrayDoubleBinding of simple type. */
    public CArrayDoubleBinding aDouble;
            
    /** Java object to which this cobol complex array element is bound. */
    private DfhcommareaType mJaxbObject;
  
    /** Java object factory for objects creation. */
    private ObjectFactory mObjectFactory;
  
    /**
     * No argument constructor.
     */
    public DfhcommareaTypeBinding() {
        this(null, null, null);
    }
  
    /**
     * Constructor for a child complex binding which be later bound to a JAXB
     * object.
     * @param parentObject the parent binding
     */
    public DfhcommareaTypeBinding(
        final CComplexBinding parentObject) {
        this(parentObject, null, null);
    }
  
    /**
     * Constructor for a root complex binding without an initial bound object.
     * @param objectFactory the java factory to use to create children instances
     */
    public DfhcommareaTypeBinding(
        final ObjectFactory objectFactory) {
        this(null, objectFactory, null);
    }

    /**
     * Constructor for a root complex binding from an existing java object.
     * @param objectFactory the java factory to use to create children instances
     * @param jaxbObject the java object to which this element is bound
     */
    public DfhcommareaTypeBinding(
        final ObjectFactory objectFactory,
        final DfhcommareaType jaxbObject) {
        this(null, objectFactory, jaxbObject);
    }

    /**
     * Constructor for a child complex binding with immediate binding to a JAXB
     * object.
     * @param parentObject the parent binding
     * @param objectFactory the java factory to use to create children instances
     * @param jaxbObject the java object to which this element is bound
     */
    public DfhcommareaTypeBinding(
        final CComplexBinding parentObject,
        final ObjectFactory objectFactory,
        final DfhcommareaType jaxbObject) {
        
        super(JAVA_NAME, JAVA_TYPE, parentObject);
        mJaxbObject = jaxbObject;
        mObjectFactory = objectFactory;
        initChildren();
    }
  
    /** Creates a binding property for each child. */
    public final void initChildren() {
    
        /* Create binding children instances */
        sString = new CStringBinding("sString", 4, false);
        sString.setCobolName("S-STRING");
        sBinary = new COctetStreamBinding("sBinary", 4);
        sBinary.setCobolName("S-BINARY");
        sShort = new CBinaryBinding("sShort", 2, 4, 0, true);
        sShort.setCobolName("S-SHORT");
        sUshort = new CBinaryBinding("sUshort", 2, 4, 0, false);
        sUshort.setCobolName("S-USHORT");
        sInt = new CBinaryBinding("sInt", 4, 9, 0, true);
        sInt.setCobolName("S-INT");
        sUint = new CBinaryBinding("sUint", 4, 9, 0, false);
        sUint.setCobolName("S-UINT");
        sLong = new CPackedDecimalBinding("sLong", 10, 18, 0, true);
        sLong.setCobolName("S-LONG");
        sUlong = new CPackedDecimalBinding("sUlong", 10, 18, 0, false);
        sUlong.setCobolName("S-ULONG");
        sXlong = new CPackedDecimalBinding("sXlong", 16, 31, 0, true);
        sXlong.setCobolName("S-XLONG");
        sUxlong = new CPackedDecimalBinding("sUxlong", 16, 31, 0, false);
        sUxlong.setCobolName("S-UXLONG");
        sDec = new CPackedDecimalBinding("sDec", 5, 9, 2, false);
        sDec.setCobolName("S-DEC");
        sFloat = new CFloatBinding("sFloat");
        sFloat.setCobolName("S-FLOAT");
        sDouble = new CDoubleBinding("sDouble");
        sDouble.setCobolName("S-DOUBLE");
        aString = new CArrayStringBinding("aString", this, 4, false, 2, 2);
        aString.setCobolName("A-STRING");
        aBinary = new CArrayStringBinding("aBinary", this, 4, false, 2, 2);
        aBinary.setCobolName("A-BINARY");
        aShort = new CArrayBinaryBinding("aShort", this, 2, 4, 0, true, 2, 2);
        aShort.setCobolName("A-SHORT");
        aUshort = new CArrayBinaryBinding("aUshort", this, 2, 4, 0, false, 2, 2);
        aUshort.setCobolName("A-USHORT");
        aInt = new CArrayBinaryBinding("aInt", this, 4, 9, 0, true, 2, 2);
        aInt.setCobolName("A-INT");
        aUint = new CArrayBinaryBinding("aUint", this, 4, 9, 0, false, 2, 2);
        aUint.setCobolName("A-UINT");
        aLong = new CArrayPackedDecimalBinding("aLong", this, 10, 18, 0, true, 2, 2);
        aLong.setCobolName("A-LONG");
        aUlong = new CArrayPackedDecimalBinding("aUlong", this, 10, 18, 0, false, 2, 2);
        aUlong.setCobolName("A-ULONG");
        aXlong = new CArrayPackedDecimalBinding("aXlong", this, 16, 31, 0, true, 2, 2);
        aXlong.setCobolName("A-XLONG");
        aUxlong = new CArrayPackedDecimalBinding("aUxlong", this, 16, 31, 0, false, 2, 2);
        aUxlong.setCobolName("A-UXLONG");
        aDec = new CArrayPackedDecimalBinding("aDec", this, 5, 9, 2, false, 2, 2);
        aDec.setCobolName("A-DEC");
        aFloat = new CArrayFloatBinding("aFloat", this, 2, 2);
        aFloat.setCobolName("A-FLOAT");
        aDouble = new CArrayDoubleBinding("aDouble", this, 2, 2);
        aDouble.setCobolName("A-DOUBLE");
        
        /* Add children to children list */
           
        getChildrenList().add(sString);
        getChildrenList().add(sBinary);
        getChildrenList().add(sShort);
        getChildrenList().add(sUshort);
        getChildrenList().add(sInt);
        getChildrenList().add(sUint);
        getChildrenList().add(sLong);
        getChildrenList().add(sUlong);
        getChildrenList().add(sXlong);
        getChildrenList().add(sUxlong);
        getChildrenList().add(sDec);
        getChildrenList().add(sFloat);
        getChildrenList().add(sDouble);
        getChildrenList().add(aString);
        getChildrenList().add(aBinary);
        getChildrenList().add(aShort);
        getChildrenList().add(aUshort);
        getChildrenList().add(aInt);
        getChildrenList().add(aUint);
        getChildrenList().add(aLong);
        getChildrenList().add(aUlong);
        getChildrenList().add(aXlong);
        getChildrenList().add(aUxlong);
        getChildrenList().add(aDec);
        getChildrenList().add(aFloat);
        getChildrenList().add(aDouble);
    }
  
   
    /** {@inheritDoc} */
    public final void createBoundObject() throws HostException {
        setJaxbObject(mObjectFactory.createDfhcommareaType());
    }
       
    /** {@inheritDoc} */
    public final void prepareChildren() throws HostException {
    
    }
  
   
    /** {@inheritDoc} */
    public final void getValuesFromBoundObject() throws HostException {
        /* Set this binding properties from java object property values */
                     
        if (mJaxbObject.getSString() != null) {
            /* Set value from sString*/
            sString.setValue(mJaxbObject.getSString());
        }
                
        if (mJaxbObject.getSBinary() != null) {
            /* Set value from sBinary*/
            sBinary.setValue(mJaxbObject.getSBinary());
        }
                
        if (mJaxbObject.getSShort() != 0) {
            /* Set value from sShort*/
            sShort.setValue(new BigDecimal(mJaxbObject.getSShort()));
        
        }
                
        if (mJaxbObject.getSUshort() != 0) {
            /* Set value from sUshort*/
            sUshort.setValue(new BigDecimal(mJaxbObject.getSUshort()));
        
        }
                
        if (mJaxbObject.getSInt() != 0) {
            /* Set value from sInt*/
            sInt.setValue(new BigDecimal(mJaxbObject.getSInt()));
        
        }
                
        if (mJaxbObject.getSUint() != 0L) {
            /* Set value from sUint*/
            sUint.setValue(new BigDecimal(mJaxbObject.getSUint()));
        
        }
                
        if (mJaxbObject.getSLong() != 0L) {
            /* Set value from sLong*/
            sLong.setValue(new BigDecimal(mJaxbObject.getSLong()));
        
        }
                
        if (mJaxbObject.getSUlong() != 0L) {
            /* Set value from sUlong*/
            sUlong.setValue(new BigDecimal(mJaxbObject.getSUlong()));
        
        }
                
        if (mJaxbObject.getSXlong() != null) {
            /* Set value from sXlong*/
            sXlong.setValue(new BigDecimal(mJaxbObject.getSXlong()));
        
        }
                
        if (mJaxbObject.getSUxlong() != null) {
            /* Set value from sUxlong*/
            sUxlong.setValue(new BigDecimal(mJaxbObject.getSUxlong()));
        
        }
                
        if (mJaxbObject.getSDec() != null) {
            /* Set value from sDec*/
            sDec.setValue(mJaxbObject.getSDec());
        
        }
                
        if (mJaxbObject.getSFloat() != 0f) {
            /* Set value from sFloat*/
            sFloat.setValue(mJaxbObject.getSFloat());
        }
                
        if (mJaxbObject.getSDouble() != 0d) {
            /* Set value from sDouble*/
            sDouble.setValue(mJaxbObject.getSDouble());
        }
                
        if (mJaxbObject.getAString() != null) {
            /* Set value from aString*/
            aString.setValue(mJaxbObject.getAString());
        }
                
        if (mJaxbObject.getABinary() != null) {
            /* Set value from aBinary*/
            aBinary.setValue(mJaxbObject.getABinary());
        }
                
        if (mJaxbObject.getAShort() != null) {
            /* Set value from aShort*/
      
            if (aShort.getList() != null) {
                aShort.getList().clear();
            } else {
                aShort.setList(new java.util.ArrayList < BigDecimal >());
            }
            for (Short item : mJaxbObject.getAShort()) {
                aShort.getList().add(new BigDecimal(item));
            }
        
        }
                
        if (mJaxbObject.getAUshort() != null) {
            /* Set value from aUshort*/
      
            if (aUshort.getList() != null) {
                aUshort.getList().clear();
            } else {
                aUshort.setList(new java.util.ArrayList < BigDecimal >());
            }
            for (Integer item : mJaxbObject.getAUshort()) {
                aUshort.getList().add(new BigDecimal(item));
            }
        
        }
                
        if (mJaxbObject.getAInt() != null) {
            /* Set value from aInt*/
      
            if (aInt.getList() != null) {
                aInt.getList().clear();
            } else {
                aInt.setList(new java.util.ArrayList < BigDecimal >());
            }
            for (Integer item : mJaxbObject.getAInt()) {
                aInt.getList().add(new BigDecimal(item));
            }
        
        }
                
        if (mJaxbObject.getAUint() != null) {
            /* Set value from aUint*/
      
            if (aUint.getList() != null) {
                aUint.getList().clear();
            } else {
                aUint.setList(new java.util.ArrayList < BigDecimal >());
            }
            for (Long item : mJaxbObject.getAUint()) {
                aUint.getList().add(new BigDecimal(item));
            }
        
        }
                
        if (mJaxbObject.getALong() != null) {
            /* Set value from aLong*/
      
            if (aLong.getList() != null) {
                aLong.getList().clear();
            } else {
                aLong.setList(new java.util.ArrayList < BigDecimal >());
            }
            for (Long item : mJaxbObject.getALong()) {
                aLong.getList().add(new BigDecimal(item));
            }
        
        }
                
        if (mJaxbObject.getAUlong() != null) {
            /* Set value from aUlong*/
      
            if (aUlong.getList() != null) {
                aUlong.getList().clear();
            } else {
                aUlong.setList(new java.util.ArrayList < BigDecimal >());
            }
            for (Long item : mJaxbObject.getAUlong()) {
                aUlong.getList().add(new BigDecimal(item));
            }
        
        }
                
        if (mJaxbObject.getAXlong() != null) {
            /* Set value from aXlong*/
      
            if (aXlong.getList() != null) {
                aXlong.getList().clear();
            } else {
                aXlong.setList(new java.util.ArrayList < BigDecimal >());
            }
            for (BigInteger item : mJaxbObject.getAXlong()) {
                aXlong.getList().add(new BigDecimal(item));
            }
        
        }
                
        if (mJaxbObject.getAUxlong() != null) {
            /* Set value from aUxlong*/
      
            if (aUxlong.getList() != null) {
                aUxlong.getList().clear();
            } else {
                aUxlong.setList(new java.util.ArrayList < BigDecimal >());
            }
            for (BigInteger item : mJaxbObject.getAUxlong()) {
                aUxlong.getList().add(new BigDecimal(item));
            }
        
        }
                
        if (mJaxbObject.getADec() != null) {
            /* Set value from aDec*/
              aDec.setValue(mJaxbObject.getADec());
        
        }
                
        if (mJaxbObject.getAFloat() != null) {
            /* Set value from aFloat*/
            aFloat.setValue(mJaxbObject.getAFloat());
        }
                
        if (mJaxbObject.getADouble() != null) {
            /* Set value from aDouble*/
            aDouble.setValue(mJaxbObject.getADouble());
        }
    
    }
       
    /** {@inheritDoc} */
    public final void setBoundObjectValue(final int index) throws HostException {
        /* Set the JAXB object property value from binding object */
        switch (index) {
        case 0:
            setBoundObjectValueSString();
            break;
        case 1:
            setBoundObjectValueSBinary();
            break;
        case 2:
            setBoundObjectValueSShort();
            break;
        case 3:
            setBoundObjectValueSUshort();
            break;
        case 4:
            setBoundObjectValueSInt();
            break;
        case 5:
            setBoundObjectValueSUint();
            break;
        case 6:
            setBoundObjectValueSLong();
            break;
        case 7:
            setBoundObjectValueSUlong();
            break;
        case 8:
            setBoundObjectValueSXlong();
            break;
        case 9:
            setBoundObjectValueSUxlong();
            break;
        case 10:
            setBoundObjectValueSDec();
            break;
        case 11:
            setBoundObjectValueSFloat();
            break;
        case 12:
            setBoundObjectValueSDouble();
            break;
        case 13:
            setBoundObjectValueAString();
            break;
        case 14:
            setBoundObjectValueABinary();
            break;
        case 15:
            setBoundObjectValueAShort();
            break;
        case 16:
            setBoundObjectValueAUshort();
            break;
        case 17:
            setBoundObjectValueAInt();
            break;
        case 18:
            setBoundObjectValueAUint();
            break;
        case 19:
            setBoundObjectValueALong();
            break;
        case 20:
            setBoundObjectValueAUlong();
            break;
        case 21:
            setBoundObjectValueAXlong();
            break;
        case 22:
            setBoundObjectValueAUxlong();
            break;
        case 23:
            setBoundObjectValueADec();
            break;
        case 24:
            setBoundObjectValueAFloat();
            break;
        case 25:
            setBoundObjectValueADouble();
            break;
        }
    }
            
    /** Set corresponding JAXB object property value. */
    private final void setBoundObjectValueSString() throws HostException {
    
        if (sString.getValue() != null) {
            /* Set value of sString*/
            mJaxbObject.setSString(sString.getValue());
        }
        
    }

    /** Set corresponding JAXB object property value. */
    private final void setBoundObjectValueSBinary() throws HostException {
    
        if (sBinary.getValue() != null) {
            /* Set value of sBinary*/
            mJaxbObject.setSBinary(sBinary.getValue());
        }
        
    }

    /** Set corresponding JAXB object property value. */
    private final void setBoundObjectValueSShort() throws HostException {
    
        if (sShort.getValue() != null) {
            
            /* Set value of sShort*/
            mJaxbObject.setSShort(sShort.getValue().shortValueExact());
                
        }
        
    }

    /** Set corresponding JAXB object property value. */
    private final void setBoundObjectValueSUshort() throws HostException {
    
        if (sUshort.getValue() != null) {
            
            /* Set value of sUshort*/
            mJaxbObject.setSUshort(sUshort.getValue().intValueExact());
                
        }
        
    }

    /** Set corresponding JAXB object property value. */
    private final void setBoundObjectValueSInt() throws HostException {
    
        if (sInt.getValue() != null) {
            
            /* Set value of sInt*/
            mJaxbObject.setSInt(sInt.getValue().intValueExact());
                
        }
        
    }

    /** Set corresponding JAXB object property value. */
    private final void setBoundObjectValueSUint() throws HostException {
    
        if (sUint.getValue() != null) {
            
            /* Set value of sUint*/
            mJaxbObject.setSUint(sUint.getValue().longValueExact());
                
        }
        
    }

    /** Set corresponding JAXB object property value. */
    private final void setBoundObjectValueSLong() throws HostException {
    
        if (sLong.getValue() != null) {
            
            /* Set value of sLong*/
            mJaxbObject.setSLong(sLong.getValue().longValueExact());
                
        }
        
    }

    /** Set corresponding JAXB object property value. */
    private final void setBoundObjectValueSUlong() throws HostException {
    
        if (sUlong.getValue() != null) {
            
            /* Set value of sUlong*/
            mJaxbObject.setSUlong(sUlong.getValue().longValueExact());
                
        }
        
    }

    /** Set corresponding JAXB object property value. */
    private final void setBoundObjectValueSXlong() throws HostException {
    
        if (sXlong.getValue() != null) {
            
            /* Set value of sXlong*/
            mJaxbObject.setSXlong(sXlong.getValue().toBigInteger());
                
        }
        
    }

    /** Set corresponding JAXB object property value. */
    private final void setBoundObjectValueSUxlong() throws HostException {
    
        if (sUxlong.getValue() != null) {
            
            /* Set value of sUxlong*/
            mJaxbObject.setSUxlong(sUxlong.getValue().toBigInteger());
                
        }
        
    }

    /** Set corresponding JAXB object property value. */
    private final void setBoundObjectValueSDec() throws HostException {
    
        if (sDec.getValue() != null) {
            
            /* Set value of sDec*/
            mJaxbObject.setSDec(sDec.getValue());
                
        }
        
    }

    /** Set corresponding JAXB object property value. */
    private final void setBoundObjectValueSFloat() throws HostException {
    
        if (sFloat.getValue() != null) {
            /* Set value of sFloat*/
            mJaxbObject.setSFloat(sFloat.getValue());
        }
        
    }

    /** Set corresponding JAXB object property value. */
    private final void setBoundObjectValueSDouble() throws HostException {
    
        if (sDouble.getValue() != null) {
            /* Set value of sDouble*/
            mJaxbObject.setSDouble(sDouble.getValue());
        }
        
    }

    /** Set corresponding JAXB object property value. */
    private final void setBoundObjectValueAString() throws HostException {
    
        if (aString.getValue() != null) {
            /* Set value of aString*/
            mJaxbObject.getAString().clear();
            mJaxbObject.getAString().addAll(aString.getValue());
        }
        
    }

    /** Set corresponding JAXB object property value. */
    private final void setBoundObjectValueABinary() throws HostException {
    
        if (aBinary.getValue() != null) {
            /* Set value of aBinary*/
            mJaxbObject.getABinary().clear();
            mJaxbObject.getABinary().addAll(aBinary.getValue());
        }
        
    }

    /** Set corresponding JAXB object property value. */
    private final void setBoundObjectValueAShort() throws HostException {
    
        if (aShort.getValue() != null) {
            
            /* Set value of aShort*/
            mJaxbObject.getAShort().clear();
            for (BigDecimal item : aShort.getValue()) {
                mJaxbObject.getAShort().add(new Short(item.shortValueExact()));
            }
                
        }
        
    }

    /** Set corresponding JAXB object property value. */
    private final void setBoundObjectValueAUshort() throws HostException {
    
        if (aUshort.getValue() != null) {
            
            /* Set value of aUshort*/
            mJaxbObject.getAUshort().clear();
            for (BigDecimal item : aUshort.getValue()) {
                mJaxbObject.getAUshort().add(new Integer(item.intValueExact()));
            }
                
        }
        
    }

    /** Set corresponding JAXB object property value. */
    private final void setBoundObjectValueAInt() throws HostException {
    
        if (aInt.getValue() != null) {
            
            /* Set value of aInt*/
            mJaxbObject.getAInt().clear();
            for (BigDecimal item : aInt.getValue()) {
                mJaxbObject.getAInt().add(new Integer(item.intValueExact()));
            }
                
        }
        
    }

    /** Set corresponding JAXB object property value. */
    private final void setBoundObjectValueAUint() throws HostException {
    
        if (aUint.getValue() != null) {
            
            /* Set value of aUint*/
            mJaxbObject.getAUint().clear();
            for (BigDecimal item : aUint.getValue()) {
                mJaxbObject.getAUint().add(new Long(item.longValueExact()));
            }
                
        }
        
    }

    /** Set corresponding JAXB object property value. */
    private final void setBoundObjectValueALong() throws HostException {
    
        if (aLong.getValue() != null) {
            
            /* Set value of aLong*/
            mJaxbObject.getALong().clear();
            for (BigDecimal item : aLong.getValue()) {
                mJaxbObject.getALong().add(new Long(item.longValueExact()));
            }
                
        }
        
    }

    /** Set corresponding JAXB object property value. */
    private final void setBoundObjectValueAUlong() throws HostException {
    
        if (aUlong.getValue() != null) {
            
            /* Set value of aUlong*/
            mJaxbObject.getAUlong().clear();
            for (BigDecimal item : aUlong.getValue()) {
                mJaxbObject.getAUlong().add(new Long(item.longValueExact()));
            }
                
        }
        
    }

    /** Set corresponding JAXB object property value. */
    private final void setBoundObjectValueAXlong() throws HostException {
    
        if (aXlong.getValue() != null) {
            
            /* Set value of aXlong*/
            mJaxbObject.getAXlong().clear();
            for (BigDecimal item : aXlong.getValue()) {
               mJaxbObject.getAXlong().add(item.toBigInteger());
            }
                
        }
        
    }

    /** Set corresponding JAXB object property value. */
    private final void setBoundObjectValueAUxlong() throws HostException {
    
        if (aUxlong.getValue() != null) {
            
            /* Set value of aUxlong*/
            mJaxbObject.getAUxlong().clear();
            for (BigDecimal item : aUxlong.getValue()) {
               mJaxbObject.getAUxlong().add(item.toBigInteger());
            }
                
        }
        
    }

    /** Set corresponding JAXB object property value. */
    private final void setBoundObjectValueADec() throws HostException {
    
        if (aDec.getValue() != null) {
            
            /* Set value of aDec*/
            mJaxbObject.getADec().clear();
            mJaxbObject.getADec().addAll(aDec.getValue());
                
        }
        
    }

    /** Set corresponding JAXB object property value. */
    private final void setBoundObjectValueAFloat() throws HostException {
    
        if (aFloat.getValue() != null) {
            /* Set value of aFloat*/
            mJaxbObject.getAFloat().clear();
            mJaxbObject.getAFloat().addAll(aFloat.getValue());
        }
        
    }

    /** Set corresponding JAXB object property value. */
    private final void setBoundObjectValueADouble() throws HostException {
    
        if (aDouble.getValue() != null) {
            /* Set value of aDouble*/
            mJaxbObject.getADouble().clear();
            mJaxbObject.getADouble().addAll(aDouble.getValue());
        }
        
    }

    /** {@inheritDoc} */
    public final Object getValue() throws HostException {
        return mJaxbObject;
    }

    /**
     * @return the java object to which this cobol complex element is bound
     */
    public final DfhcommareaType getJaxbObject() {
        return mJaxbObject;
    }

    /**
     * @param jaxbObject the java object to which this cobol complex element
     * is bound
     */
    public final void setJaxbObject(
        final DfhcommareaType jaxbObject) {
        mJaxbObject = jaxbObject;
    }

    /**
     * @return the java object factory for objects creation
     */
    public final ObjectFactory getObjectFactory() {
        return mObjectFactory;
    }

    /**
     * @param objectFactory the java object factory for objects creation to set
     */
    public final void setObjectFactory(final ObjectFactory objectFactory) {
        mObjectFactory = objectFactory;
    }

}
